{"version":3,"file":"mocha-lib-tester.es2015.js","sources":["../src/linter.js","../src/reporters/MochaReporter.js","../src/tester.js","../src/hooks/chai.js","../src/hooks/babel.js","../src/hooks/istanbul.js","../src/reporters/codeCoverage.js","../src/reporters/codecov.js","../src/codecov.js","../src/reporter.js","../src/mlt.js","../src/codeCoverage.js"],"sourcesContent":["import { CLIEngine } from 'eslint';\nimport { sync as globSync } from 'glob';\n\nfunction linter( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst cli = new CLIEngine( {\n\t\tuseEslintrc: false,\n\t\tcwd: projectPath,\n\t\tignorePattern: [ 'tests/fixtures/**/*.js' ],\n\t\tbaseConfig: {\n\t\t\textends: '@comandeer/eslint-config'\n\t\t}\n\t} );\n\n\tconst { results } = cli.executeOnFiles( prepareExistentFilePaths( projectPath ) );\n\n\treturn Promise.resolve( {\n\t\tname: 'linter',\n\t\tok: isOk( results ),\n\t\tresults,\n\t\treporter: cli.getFormatter()\n\t} );\n}\n\n// Workaround for https://eslint.org/docs/5.0.0/user-guide/migrating-to-5.0.0#nonexistent-files\nfunction prepareExistentFilePaths( cwd ) {\n\tconst candidates = [\n\t\t'src/**/*.js',\n\t\t'bin/**/*',\n\t\t'tests/**/*.js'\n\t];\n\n\treturn candidates.filter( ( candidate ) => {\n\t\tconst found = globSync( candidate, {\n\t\t\tcwd\n\t\t} );\n\n\t\treturn found.length > 0;\n\t} );\n}\n\nfunction isOk( results ) {\n\treturn results.every( ( { errorCount } ) => {\n\t\treturn errorCount === 0;\n\t} );\n}\n\nexport default linter;\n","/* eslint-disable no-console */\n\nimport { format } from 'util';\nimport { reporters } from 'mocha';\n\nconst { Base, Spec } = reporters;\n\nclass MochaReporter extends Spec {\n\tconstructor( runner ) {\n\t\tconst output = [];\n\t\tconst results = {};\n\t\tlet ok = true;\n\t\tconst originalConsoleLog = Base.consoleLog;\n\n\t\tBase.consoleLog = function( ...args ) {\n\t\t\toutput.push( format( ...args ) );\n\t\t};\n\n\t\tsuper( runner );\n\n\t\trunner.on( 'test end', ( { file, state, title } ) => {\n\t\t\tif ( typeof results[ file ] === 'undefined' ) {\n\t\t\t\tresults[ file ] = {};\n\t\t\t}\n\n\t\t\tresults[ file ][ title ] = state;\n\t\t} );\n\n\t\trunner.once( 'fail', () => {\n\t\t\tok = false;\n\t\t} );\n\n\t\trunner.once( 'end', () => {\n\t\t\tBase.consoleLog = originalConsoleLog;\n\n\t\t\trunner.suite.results = {\n\t\t\t\tresults,\n\t\t\t\tok,\n\t\t\t\treporter() {\n\t\t\t\t\tconsole.log( output.join( '\\n' ) );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n}\n\nexport default MochaReporter;\n","import Mocha from 'mocha';\nimport { sync as globSync } from 'glob';\nimport MochaReporter from './reporters/MochaReporter.js';\nimport addChaiHook from './hooks/chai.js';\nimport addBabelHook from './hooks/babel.js';\nimport addIstanbulHook from './hooks/istanbul.js';\n\nfunction tester( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\taddChaiHook( projectPath );\n\taddBabelHook( projectPath );\n\taddIstanbulHook( projectPath );\n\n\tconst mocha = new Mocha( {\n\t\treporter: MochaReporter,\n\t\ttimeout: 15000\n\t} );\n\tconst tests = findTestFiles( projectPath );\n\n\ttests.forEach( ( test ) => {\n\t\tmocha.addFile( test );\n\t} );\n\n\treturn new Promise( ( resolve ) => {\n\t\tmocha.run( () => {\n\t\t\tresolve( {\n\t\t\t\tname: 'tester',\n\t\t\t\t...mocha.suite.results\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nfunction findTestFiles( cwd ) {\n\treturn globSync( 'tests/**/*.js', {\n\t\tcwd,\n\t\tignore: [\n\t\t\t'tests/fixtures/**/*.js',\n\t\t\t'tests/helpers/**/*.js'\n\t\t],\n\t\trealpath: true\n\t} );\n}\n\nexport default tester;\n","import { resolve as resolvePath } from 'path';\nimport { addHook } from 'pirates';\n\nconst chaiPreamble = `import { expect } from 'chai';\nimport { use as chaiUse } from 'chai';\nimport sinon from 'sinon';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinonChai from 'sinon-chai';\nimport { noCallThru as pqNoCallThru } from 'proxyquire';\n\nchaiUse( chaiAsPromised );\nchaiUse( sinonChai );\n\nconst proxyquire = pqNoCallThru();\\n`;\n\nfunction addChaiHook( projectPath ) {\n\tconst testsPath = resolvePath( projectPath, 'tests' );\n\tconst fixturesPath = resolvePath( testsPath, 'fixtures' );\n\n\taddHook(\n\t\t( code ) => {\n\t\t\treturn `${ chaiPreamble }${ code }`;\n\t\t},\n\n\t\t{\n\t\t\texts: [ '.js' ],\n\t\t\tmatcher( path ) {\n\t\t\t\treturn path.startsWith( testsPath ) && !path.startsWith( fixturesPath );\n\t\t\t}\n\t\t}\n\t);\n}\n\nexport default addChaiHook;\n","import babelRegister from '@babel/register';\nimport preset from '@babel/preset-env';\n\nfunction addBabelHook() {\n\tbabelRegister( {\n\t\tbabelrc: false,\n\t\tpresets: [\n\t\t\t[\n\t\t\t\tpreset,\n\t\t\t\t{\n\t\t\t\t\ttargets: {\n\t\t\t\t\t\tnode: '12.0.0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t} );\n}\n\nexport default addBabelHook;\n","import { resolve as resolvePath } from 'path';\nimport { createInstrumenter } from 'istanbul-lib-instrument';\nimport { addHook } from 'pirates';\n\nfunction addIstanbulHook( projectPath ) {\n\tconst srcPath = resolvePath( projectPath, 'src' );\n\tconst instrumenter = createInstrumenter( {\n\t\tcoverageVariable: '__mltCoverage__'\n\t} );\n\n\taddHook(\n\t\t( code, fileName ) => {\n\t\t\treturn instrumenter.instrumentSync( code, fileName );\n\t\t},\n\n\t\t{\n\t\t\texts: [ '.js' ],\n\t\t\tmatcher( path ) {\n\t\t\t\treturn path.startsWith( srcPath );\n\t\t\t}\n\t\t}\n\t);\n}\n\nexport default addIstanbulHook;\n","import { resolve as resolvePath } from 'path';\nimport libReport from 'istanbul-lib-report';\nimport reports from 'istanbul-reports';\n\nfunction codeCoverageReporter( projectPath ) {\n\treturn function( coverageMap ) {\n\t\tconst configWatermarks = {\n\t\t\tstatements: [ 50, 80 ],\n\t\t\tfunctions: [ 50, 80 ],\n\t\t\tbranches: [ 50, 80 ],\n\t\t\tlines: [ 50, 80 ]\n\t\t};\n\t\tconst context = libReport.createContext( {\n\t\t\tdir: resolvePath( projectPath, '.coverage' ),\n\t\t\tdefaultSummarizer: 'nested',\n\t\t\twatermarks: configWatermarks,\n\t\t\tcoverageMap\n\t\t} );\n\t\tconst lcovReport = reports.create( 'lcovonly' );\n\t\tconst textReport = reports.create( 'text' );\n\n\t\tlcovReport.execute( context );\n\t\ttextReport.execute( context );\n\t};\n}\n\nexport default codeCoverageReporter;\n","/* eslint-disable no-console */\n/* istanbul ignore file */\n\nimport chalk from 'chalk';\n\nfunction codecovReporter( results ) {\n\tif ( results.skipped ) {\n\t\tconsole.log( chalk.yellow( 'CodeCov upload skipped' ) );\n\t\treturn;\n\t}\n\n\tconsole.log( results.stdout );\n}\n\nexport default codecovReporter;\n","/* istanbul ignore file */\n\nimport { resolve as resolvePath } from 'path';\nimport { exec } from 'child_process';\nimport isCI from 'is-ci';\nimport codecovReporter from './reporters/codecov.js';\n\nfunction codecov( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst resultsTemplate = {\n\t\tname: 'codecov',\n\t\treporter: codecovReporter\n\t};\n\n\tif ( !isCI || process.env.NO_CODECOV ) {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: true,\n\t\t\tresults: {\n\t\t\t\tskipped: true\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn executeCLI( projectPath ).then( ( { exitCode, stdout, stderr } ) => {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: exitCode === 0,\n\t\t\tresults: {\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t}\n\t\t} );\n\t} );\n}\n\nfunction executeCLI( projectPath ) {\n\tconst codecovPath = resolvePath( __dirname, '..', 'node_modules', 'codecov', 'bin', 'codecov' );\n\n\treturn new Promise( ( resolve ) => {\n\t\tconst codecovProcess = exec( `node ${ codecovPath }`, {\n\t\t\tcwd: projectPath\n\t\t}, ( error, stdout, stderr ) => {\n\t\t\tresolve( {\n\t\t\t\texitCode: codecovProcess.exitCode,\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nexport default codecov;\n","function reporter( steps = [] ) {\n\tif ( !steps.every( validateStep ) ) {\n\t\tthrow new TypeError( 'Passed results must be of correct type' );\n\t}\n\n\tsteps.forEach( ( { results, reporter } ) => {\n\t\treporter( results );\n\t} );\n}\n\nfunction validateStep( step ) {\n\treturn typeof step.results !== 'undefined' && typeof step.reporter === 'function';\n}\n\nexport default reporter;\n","/* istanbul ignore file */\n/* eslint-disable no-console */\nimport chalk from 'chalk';\nimport linter from './linter.js';\nimport tester from './tester.js';\nimport codeCoverage from './codeCoverage.js';\nimport codecov from './codecov.js';\nimport reporter from './reporter.js';\n\nasync function mlt() {\n\tconst projectPath = process.cwd();\n\n\tconsole.log( 'MLT' );\n\tconsole.log( chalk.yellow( 'Executing testsâ€¦' ) );\n\n\tconst results = [];\n\tlet exitCode = 0;\n\n\ttry {\n\t\tconsole.log( chalk.blue.bold( '---Linter---' ) );\n\t\tconst linterResults = await linter( projectPath );\n\n\t\tprocessResults( linterResults );\n\n\t\tconsole.log( chalk.blue.bold( '---Tester---' ) );\n\t\tconst testResults = await tester( projectPath );\n\n\t\tprocessResults( testResults );\n\n\t\tconsole.log( chalk.blue.bold( '---Code Coverage---' ) );\n\t\tconst codeCoverageResults = await codeCoverage( projectPath, global.__mltCoverage__ );\n\n\t\tprocessResults( codeCoverageResults );\n\n\t\tconsole.log( chalk.blue.bold( '---CodeCov---' ) );\n\t\tconst codecovResults = await codecov( projectPath );\n\n\t\tprocessResults( codecovResults );\n\t} catch ( { message } ) {\n\t\texitCode = 1;\n\t\tconsole.error( chalk.red( `Error occured: ${ message }. Skipping subsequent steps` ) );\n\t} finally {\n\t\treporter( results );\n\t}\n\n\treturn exitCode;\n\n\tfunction processResults( stepResults ) {\n\t\tresults.push( stepResults );\n\n\t\tif ( !stepResults.ok ) {\n\t\t\tthrow new Error( `Errors detected during ${ stepResults.name } step` );\n\t\t}\n\n\t\tconsole.log( chalk.green( `${ stepResults.name } step finished correctly.` ) );\n\t}\n}\n\nexport default mlt;\n","import { createCoverageMap } from 'istanbul-lib-coverage';\nimport codeCoverageReporter from './reporters/codeCoverage.js';\n\nfunction codeCoverage( projectPath, data ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tif ( !data || typeof data !== 'object' || Array.isArray( data ) ) {\n\t\tthrow new TypeError( 'Provided code coverage data must be an object' );\n\t}\n\n\tconst coverageMap = createCoverageMap( data );\n\n\treturn Promise.resolve( {\n\t\tname: 'code coverage',\n\t\tok: true,\n\t\tresults: coverageMap,\n\t\treporter: codeCoverageReporter( projectPath )\n\t} );\n}\n\nexport default codeCoverage;\n"],"names":["linter","projectPath","length","TypeError","cli","CLIEngine","useEslintrc","cwd","ignorePattern","baseConfig","extends","results","executeOnFiles","filter","candidate","globSync","Promise","resolve","name","ok","isOk","reporter","getFormatter","every","errorCount","Base","Spec","reporters","MochaReporter","constructor","runner","output","originalConsoleLog","consoleLog","args","push","format","on","file","state","title","once","suite","console","log","join","tester","testsPath","resolvePath","fixturesPath","addHook","code","exts","matcher","path","startsWith","addChaiHook","babelRegister","babelrc","presets","preset","targets","node","srcPath","instrumenter","createInstrumenter","coverageVariable","fileName","instrumentSync","addIstanbulHook","mocha","Mocha","timeout","ignore","realpath","forEach","test","addFile","run","codeCoverageReporter","coverageMap","context","libReport","createContext","dir","defaultSummarizer","watermarks","statements","functions","branches","lines","lcovReport","reports","create","textReport","execute","codecovReporter","skipped","chalk","yellow","stdout","codecov","resultsTemplate","isCI","process","env","NO_CODECOV","Object","assign","codecovPath","__dirname","codecovProcess","exec","error","stderr","exitCode","executeCLI","then","validateStep","step","async","blue","bold","processResults","data","Array","isArray","createCoverageMap","codeCoverage","global","__mltCoverage__","message","red","steps","stepResults","Error","green"],"mappings":";4gBAGA,SAASA,EAAQC,MACY,iBAAhBA,GAAmD,IAAvBA,EAAYC,aAC7C,IAAIC,UAAW,kDAGhBC,EAAM,IAAIC,EAAW,CAC1BC,aAAa,EACbC,IAAKN,EACLO,cAAe,CAAE,0BACjBC,WAAY,CACXC,QAAS,+BAILC,QAAEA,GAAYP,EAAIQ,gBAWUL,EAXgCN,EAY/C,CAClB,cACA,WACA,iBAGiBY,OAAUC,GACbC,EAAUD,EAAW,CAClCP,IAAAA,IAGYL,OAAS,KAZxB,IAAmCK,SAT3BS,QAAQC,QAAS,CACvBC,KAAM,SACNC,GAAIC,EAAMT,GACVA,QAAAA,EACAU,SAAUjB,EAAIkB,iBAqBhB,SAASF,EAAMT,UACPA,EAAQY,MAAO,EAAIC,WAAAA,KACH,IAAfA,GCzCT,MAAMC,KAAEA,EAAFC,KAAQA,GAASC,EAEvB,MAAMC,UAAsBF,EAC3BG,YAAaC,SACNC,EAAS,GACTpB,EAAU,OACZQ,GAAK,QACHa,EAAqBP,EAAKQ,WAEhCR,EAAKQ,WAAa,YAAaC,GAC9BH,EAAOI,KAAMC,KAAWF,WAGlBJ,GAEPA,EAAOO,GAAI,WAAY,EAAIC,KAAAA,EAAMC,MAAAA,EAAOC,MAAAA,WACP,IAApB7B,EAAS2B,KACpB3B,EAAS2B,GAAS,IAGnB3B,EAAS2B,GAAQE,GAAUD,IAG5BT,EAAOW,KAAM,OAAQ,KACpBtB,GAAK,IAGNW,EAAOW,KAAM,MAAO,KACnBhB,EAAKQ,WAAaD,EAElBF,EAAOY,MAAM/B,QAAU,CACtBA,QAAAA,EACAQ,GAAAA,EACAE,WACCsB,QAAQC,IAAKb,EAAOc,KAAM,YChC/B,SAASC,EAAQ7C,MACY,iBAAhBA,GAAmD,IAAvBA,EAAYC,aAC7C,IAAIC,UAAW,6CCMvB,SAAsBF,SACf8C,EAAYC,EAAa/C,EAAa,SACtCgD,EAAeD,EAAaD,EAAW,YAE7CG,EACGC,GACO,iVAAoBA,EAG7B,CACCC,KAAM,CAAE,OACRC,QAASC,GACDA,EAAKC,WAAYR,KAAgBO,EAAKC,WAAYN,KDf5DO,CAAavD,GERbwD,EAAe,CACdC,SAAS,EACTC,QAAS,CACR,CACCC,EACA,CACCC,QAAS,CACRC,KAAM,eCPZ,SAA0B7D,SACnB8D,EAAUf,EAAa/C,EAAa,OACpC+D,EAAeC,EAAoB,CACxCC,iBAAkB,oBAGnBhB,EACC,CAAEC,EAAMgB,IACAH,EAAaI,eAAgBjB,EAAMgB,GAG3C,CACCf,KAAM,CAAE,OACRC,QAASC,GACDA,EAAKC,WAAYQ,KHJ3BM,CAAiBpE,SAEXqE,EAAQ,IAAIC,EAAO,CACxBlD,SAAUO,EACV4C,QAAS,cAmBHzD,EAAU,gBAAiB,CACjCR,IAlB4BN,EAmB5BwE,OAAQ,CACP,yBACA,yBAEDC,UAAU,IArBLC,QAAWC,IAChBN,EAAMO,QAASD,KAGT,IAAI5D,QAAWC,IACrBqD,EAAMQ,IAAK,KACV7D,EAAS,CACRC,KAAM,YACHoD,EAAM5B,MAAM/B,cI1BnB,SAASoE,EAAsB9E,UACvB,SAAU+E,SAOVC,EAAUC,EAAUC,cAAe,CACxCC,IAAKpC,EAAa/C,EAAa,aAC/BoF,kBAAmB,SACnBC,WATwB,CACxBC,WAAY,CAAE,GAAI,IAClBC,UAAW,CAAE,GAAI,IACjBC,SAAU,CAAE,GAAI,IAChBC,MAAO,CAAE,GAAI,KAMbV,YAAAA,IAEKW,EAAaC,EAAQC,OAAQ,YAC7BC,EAAaF,EAAQC,OAAQ,QAEnCF,EAAWI,QAASd,GACpBa,EAAWC,QAASd,ICjBtB,SAASe,EAAiBrF,GACpBA,EAAQsF,QACZtD,QAAQC,IAAKsD,EAAMC,OAAQ,2BAI5BxD,QAAQC,IAAKjC,EAAQyF,QCJtB,SAASC,EAASpG,MACW,iBAAhBA,GAAmD,IAAvBA,EAAYC,aAC7C,IAAIC,UAAW,kDAGhBmG,EAAkB,CACvBpF,KAAM,UACNG,SAAU2E,UAGLO,GAAQC,QAAQC,IAAIC,WAClBC,OAAOC,OAAQ,GAAIN,EAAiB,CAC1CnF,IAAI,EACJR,QAAS,CACRsF,SAAS,KAgBb,SAAqBhG,SACd4G,EAAc7D,EAAa8D,UAAW,KAAM,eAAgB,UAAW,MAAO,kBAE7E,IAAI9F,QAAWC,UACf8F,EAAiBC,EAAO,QAAQH,EAAgB,CACrDtG,IAAKN,GACH,CAAEgH,EAAOb,EAAQc,KACnBjG,EAAS,CACRkG,SAAUJ,EAAeI,SACzBf,OAAAA,EACAc,OAAAA,QArBIE,CAAYnH,GAAcoH,KAAM,EAAIF,SAAAA,EAAUf,OAAAA,EAAQc,OAAAA,KACrDP,OAAOC,OAAQ,GAAIN,EAAiB,CAC1CnF,GAAiB,IAAbgG,EACJxG,QAAS,CACRyF,OAAAA,EACAc,OAAAA,MCrBJ,SAASI,EAAcC,eACS,IAAjBA,EAAK5G,SAAoD,mBAAlB4G,EAAKlG,wBCF3DmG,uBACOvH,EAAcuG,QAAQjG,MAE5BoC,QAAQC,IAAK,OACbD,QAAQC,IAAKsD,EAAMC,OAAQ,2BAErBxF,EAAU,OACZwG,EAAW,MAGdxE,QAAQC,IAAKsD,EAAMuB,KAAKC,KAAM,iBAG9BC,QAF4B3H,EAAQC,IAIpC0C,QAAQC,IAAKsD,EAAMuB,KAAKC,KAAM,iBAG9BC,QAF0B7E,EAAQ7C,IAIlC0C,QAAQC,IAAKsD,EAAMuB,KAAKC,KAAM,wBAG9BC,QC7BF,SAAuB1H,EAAa2H,MACP,iBAAhB3H,GAAmD,IAAvBA,EAAYC,aAC7C,IAAIC,UAAW,gDAGhByH,GAAwB,iBAATA,GAAqBC,MAAMC,QAASF,SAClD,IAAIzH,UAAW,uDAGhB6E,EAAc+C,EAAmBH,UAEhC5G,QAAQC,QAAS,CACvBC,KAAM,gBACNC,IAAI,EACJR,QAASqE,EACT3D,SAAU0D,EAAsB9E,KDYE+H,CAAc/H,EAAagI,OAAOC,kBAIpEvF,QAAQC,IAAKsD,EAAMuB,KAAKC,KAAM,kBAG9BC,QAF6BtB,EAASpG,IAGrC,OAAQkI,QAAEA,IACXhB,EAAW,EACXxE,QAAQsE,MAAOf,EAAMkC,IAAM,kBAAkBD,0CDxC/C,SAAmBE,EAAQ,QACpBA,EAAM9G,MAAO+F,SACZ,IAAInH,UAAW,0CAGtBkI,EAAM1D,QAAS,EAAIhE,QAAAA,EAASU,SAAAA,MAC3BA,EAAUV,KCoCVU,CAAUV,UAGJwG,WAEEQ,EAAgBW,MACxB3H,EAAQwB,KAAMmG,IAERA,EAAYnH,SACX,IAAIoH,MAAQ,0BAA0BD,EAAYpH,aAGzDyB,QAAQC,IAAKsD,EAAMsC,MAAWF,EAAYpH,KAAf"}