{"version":3,"file":"mocha-lib-tester.es2015.js","sources":["../src/reporters/linter.js","../src/linter.js","../src/reporters/MochaReporter.js","../src/tester.js","../src/hooks/chai.js","../src/hooks/babel.js","../src/hooks/istanbul.js","../src/reporters/codeCoverage.js","../src/LoggerColor.js","../src/LoggerType.js","../src/reporters/codecov.js","../src/codecov.js","../src/Runner.js","../src/Logger.js","../src/mlt.js","../src/codeCoverage.js"],"sourcesContent":["/* eslint-disable no-console */\n/* istanbul ignore file */\n\nimport formatter from 'eslint/lib/cli-engine/formatters/stylish.js';\n\nfunction linterReporter( results, logger ) {\n\tlogger.log( formatter( results ) );\n}\n\nexport default linterReporter;\n","import { ESLint } from 'eslint';\nimport { sync as globSync } from 'glob';\nimport linterReporter from './reporters/linter';\n\nfunction linter( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst eslint = new ESLint( {\n\t\tuseEslintrc: false,\n\t\tcwd: projectPath,\n\t\tbaseConfig: {\n\t\t\textends: '@comandeer/eslint-config'\n\t\t},\n\t\toverrideConfig: {\n\t\t\tignorePatterns: [ 'tests/fixtures/**/*.js' ]\n\t\t}\n\t} );\n\n\treturn eslint.lintFiles( prepareExistentFilePaths( projectPath ) ).then( ( results ) => {\n\t\treturn {\n\t\t\tname: 'linter',\n\t\t\tok: isOk( results ),\n\t\t\tresults,\n\t\t\treporter: linterReporter\n\t\t};\n\t} );\n}\n\n// Workaround for https://eslint.org/docs/5.0.0/user-guide/migrating-to-5.0.0#nonexistent-files\nfunction prepareExistentFilePaths( cwd ) {\n\tconst candidates = [\n\t\t'src/**/*.js',\n\t\t'bin/**/*',\n\t\t'tests/**/*.js'\n\t];\n\n\treturn candidates.filter( ( candidate ) => {\n\t\tconst found = globSync( candidate, {\n\t\t\tcwd\n\t\t} );\n\n\t\treturn found.length > 0;\n\t} );\n}\n\nfunction isOk( results ) {\n\treturn results.every( ( { errorCount } ) => {\n\t\treturn errorCount === 0;\n\t} );\n}\n\nexport default linter;\n","/* eslint-disable no-console */\n\nimport { format } from 'util';\nimport { reporters } from 'mocha';\n\nconst { Base, Spec } = reporters;\n\nclass MochaReporter extends Spec {\n\tconstructor( runner ) {\n\t\tconst output = [];\n\t\tconst results = {};\n\t\tlet ok = true;\n\t\tconst originalConsoleLog = Base.consoleLog;\n\n\t\tBase.consoleLog = function( ...args ) {\n\t\t\toutput.push( format( ...args ) );\n\t\t};\n\n\t\tsuper( runner );\n\n\t\trunner.on( 'test end', ( { file, state, title } ) => {\n\t\t\tif ( typeof results[ file ] === 'undefined' ) {\n\t\t\t\tresults[ file ] = {};\n\t\t\t}\n\n\t\t\tresults[ file ][ title ] = state;\n\t\t} );\n\n\t\trunner.once( 'fail', () => {\n\t\t\tok = false;\n\t\t} );\n\n\t\trunner.once( 'end', () => {\n\t\t\tBase.consoleLog = originalConsoleLog;\n\n\t\t\trunner.suite.results = {\n\t\t\t\tresults,\n\t\t\t\tok,\n\t\t\t\treporter( _, logger ) {\n\t\t\t\t\tlogger.log( output.join( '\\n' ) );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n}\n\nexport default MochaReporter;\n","import Mocha from 'mocha';\nimport { sync as globSync } from 'glob';\nimport MochaReporter from './reporters/MochaReporter.js';\nimport addChaiHook from './hooks/chai.js';\nimport addBabelHook from './hooks/babel.js';\nimport addIstanbulHook from './hooks/istanbul.js';\n\nfunction tester( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\taddChaiHook( projectPath );\n\taddBabelHook( projectPath );\n\taddIstanbulHook( projectPath );\n\n\tconst mocha = new Mocha( {\n\t\treporter: MochaReporter,\n\t\ttimeout: 15000\n\t} );\n\tconst tests = findTestFiles( projectPath );\n\n\ttests.forEach( ( test ) => {\n\t\tmocha.addFile( test );\n\t} );\n\n\treturn new Promise( ( resolve ) => {\n\t\tmocha.run( () => {\n\t\t\tresolve( {\n\t\t\t\tname: 'tester',\n\t\t\t\t...mocha.suite.results\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nfunction findTestFiles( cwd ) {\n\treturn globSync( 'tests/**/*.js', {\n\t\tcwd,\n\t\tignore: [\n\t\t\t'tests/fixtures/**/*.js',\n\t\t\t'tests/helpers/**/*.js'\n\t\t],\n\t\trealpath: true\n\t} );\n}\n\nexport default tester;\n","import { resolve as resolvePath } from 'path';\nimport { addHook } from 'pirates';\nconst chaiPreamble = 'import{expect}from\"chai\";import{use as chaiUse}from\"chai\";import sinon from\"sinon\";import chaiAsPromised from\"chai-as-promised\";import sinonChai from\"sinon-chai\";import{noCallThru as pqNoCallThru}from\"proxyquire\";chaiUse(chaiAsPromised),chaiUse(sinonChai);const proxyquire=pqNoCallThru();';\n\nfunction addChaiHook( projectPath ) {\n\tconst testsPath = resolvePath( projectPath, 'tests' );\n\tconst fixturesPath = resolvePath( testsPath, 'fixtures' );\n\taddHook( ( code ) => {\n\t\treturn `${chaiPreamble}${code}`;\n\t}, {\n\t\texts: [ '.js' ],\n\n\t\tmatcher( path ) {\n\t\t\treturn path.startsWith( testsPath ) && !path.startsWith( fixturesPath );\n\t\t}\n\n\t} );\n}\n\nexport default addChaiHook;\n","import babelRegister from '@babel/register';\nimport preset from '@babel/preset-env';\n\nfunction addBabelHook() {\n\tbabelRegister( {\n\t\tbabelrc: false,\n\t\tpresets: [\n\t\t\t[\n\t\t\t\tpreset,\n\t\t\t\t{\n\t\t\t\t\ttargets: {\n\t\t\t\t\t\tnode: '12.0.0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t} );\n}\n\nexport default addBabelHook;\n","import { resolve as resolvePath } from 'path';\nimport { createInstrumenter } from 'istanbul-lib-instrument';\nimport { addHook } from 'pirates';\n\nfunction addIstanbulHook( projectPath ) {\n\tconst srcPath = resolvePath( projectPath, 'src' );\n\tconst instrumenter = createInstrumenter( {\n\t\tcoverageVariable: '__mltCoverage__'\n\t} );\n\n\taddHook(\n\t\t( code, fileName ) => {\n\t\t\treturn instrumenter.instrumentSync( code, fileName );\n\t\t},\n\n\t\t{\n\t\t\texts: [ '.js' ],\n\t\t\tmatcher( path ) {\n\t\t\t\treturn path.startsWith( srcPath );\n\t\t\t}\n\t\t}\n\t);\n}\n\nexport default addIstanbulHook;\n","import { resolve as resolvePath } from 'path';\nimport libReport from 'istanbul-lib-report';\nimport reports from 'istanbul-reports';\n\nfunction codeCoverageReporter( projectPath ) {\n\treturn function( coverageMap ) {\n\t\tconst configWatermarks = {\n\t\t\tstatements: [ 50, 80 ],\n\t\t\tfunctions: [ 50, 80 ],\n\t\t\tbranches: [ 50, 80 ],\n\t\t\tlines: [ 50, 80 ]\n\t\t};\n\t\tconst context = libReport.createContext( {\n\t\t\tdir: resolvePath( projectPath, '.coverage' ),\n\t\t\tdefaultSummarizer: 'nested',\n\t\t\twatermarks: configWatermarks,\n\t\t\tcoverageMap\n\t\t} );\n\t\tconst lcovReport = reports.create( 'lcovonly' );\n\t\tconst textReport = reports.create( 'text' );\n\n\t\tlcovReport.execute( context );\n\t\ttextReport.execute( context );\n\t};\n}\n\nexport default codeCoverageReporter;\n","import { Enumify } from 'enumify';\n\nclass LoggerColor extends Enumify {}\n\nLoggerColor.AUTO = new LoggerColor();\nLoggerColor.BLUE = new LoggerColor();\nLoggerColor.YELLOW = new LoggerColor();\nLoggerColor.GREEN = new LoggerColor();\nLoggerColor.RED = new LoggerColor();\n\nLoggerColor.closeEnum();\n\nexport default LoggerColor;\n","import { Enumify } from 'enumify';\n\nclass LoggerType extends Enumify {}\n\nLoggerType.LOG = new LoggerType();\nLoggerType.ERROR = new LoggerType();\n\nLoggerType.closeEnum();\n\nexport default LoggerType;\n","/* eslint-disable no-console */\n/* istanbul ignore file */\n\nimport LoggerColor from  '../LoggerColor.js';\nimport LoggerType from '../LoggerType.js';\n\nfunction codecovReporter( results, logger ) {\n\tif ( results.skipped ) {\n\t\tlogger.log( 'CodeCov upload skipped', {\n\t\t\tcolor: LoggerColor.YELLOW\n\t\t} );\n\n\t\treturn;\n\t}\n\n\tlogger.log( results.stdout );\n\n\tif ( results.stderr ) {\n\t\tlogger.log( results.stderr, {\n\t\t\ttype: LoggerType.ERROR,\n\t\t\tcolor: LoggerColor.RED\n\t\t} );\n\t}\n}\n\nexport default codecovReporter;\n","/* istanbul ignore file */\n\nimport { exec } from 'child_process';\nimport isCI from 'is-ci';\nimport npmRunPath from 'npm-run-path';\nimport codecovReporter from './reporters/codecov.js';\n\nfunction codecov( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst resultsTemplate = {\n\t\tname: 'codecov',\n\t\treporter: codecovReporter\n\t};\n\n\tif ( !isCI || process.env.NO_CODECOV ) {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: true,\n\t\t\tresults: {\n\t\t\t\tskipped: true\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn executeCLI( projectPath ).then( ( { exitCode, stdout, stderr } ) => {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: exitCode === 0,\n\t\t\tresults: {\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t}\n\t\t} );\n\t} );\n}\n\nfunction executeCLI( projectPath ) {\n\treturn new Promise( ( resolve ) => {\n\t\tconst codecovProcess = exec( 'codecov', {\n\t\t\tcwd: projectPath,\n\t\t\tenv: npmRunPath.env()\n\t\t}, ( error, stdout, stderr ) => {\n\t\t\tresolve( {\n\t\t\t\texitCode: codecovProcess.exitCode,\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nexport default codecov;\n","import EventEmitter from 'events';\n\nconst stepsSymbol = Symbol( 'steps' );\n\nclass Runner extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis[ stepsSymbol ] = Object.freeze( new Set() );\n\t}\n\n\tget steps() {\n\t\treturn this[ stepsSymbol ];\n\t}\n\n\taddStep( step ) {\n\t\tif ( !isValidStep( step ) ) {\n\t\t\tthrow new TypeError( 'Provided object must be a valid step definition' );\n\t\t}\n\n\t\tthis.steps.add( step );\n\t}\n\n\taddSteps( steps ) {\n\t\tconst isValidStepsArray = Array.isArray( steps ) && steps.every( ( step ) => {\n\t\t\treturn isValidStep( step );\n\t\t} );\n\n\t\tif ( !isValidStepsArray ) {\n\t\t\tthrow new TypeError( 'Provided array must contain only valid step definitions' );\n\t\t}\n\n\t\tsteps.forEach( ( step ) => {\n\t\t\tthis.addStep( step );\n\t\t} );\n\t}\n\n\trun() {\n\t\tthis.emit( 'start' );\n\n\t\tconst steps = [ ...this.steps ];\n\n\t\treturn this._processSteps( steps );\n\t}\n\n\tasync _processSteps( steps ) {\n\t\tconst finish = ( result ) => {\n\t\t\tthis.emit( 'end', result );\n\n\t\t\treturn result;\n\t\t};\n\t\tconst step = steps.shift();\n\n\t\tif ( !step ) {\n\t\t\treturn finish( true );\n\t\t}\n\n\t\tthis.emit( 'step:start', step );\n\n\t\ttry {\n\t\t\tconst result = await step.run();\n\n\t\t\tif ( !isValidResult( result ) ) {\n\t\t\t\tthrow new TypeError( `Step ${ step.name } didn't return correct results` );\n\t\t\t}\n\n\t\t\tthis.emit( 'step:end', step, result );\n\n\t\t\tif ( !result.ok ) {\n\t\t\t\treturn finish( false );\n\t\t\t}\n\n\t\t\tif ( steps.length === 0 ) {\n\t\t\t\treturn finish( true );\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.emit( 'error', error );\n\n\t\t\treturn finish( false );\n\t\t}\n\n\t\treturn this._processSteps( steps );\n\t}\n}\n\nfunction isValidStep( step ) {\n\tif ( !step || typeof step !== 'object' ) {\n\t\treturn false;\n\t}\n\n\tconst isIdValid = isValidStepId( step.id );\n\tconst isNameValid = typeof step.name === 'string' && step.name.trim().length > 0;\n\tconst isRunValid = typeof step.run === 'function';\n\n\treturn isIdValid && isNameValid && isRunValid;\n\n\tfunction isValidStepId( id ) {\n\t\tif ( typeof id !== 'string' || id.trim().length === 0 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst whiteSpaceRegex = /\\s/;\n\t\tconst isLoweredCase = id === id.toLowerCase();\n\t\tconst isSpaceless = !whiteSpaceRegex.test( id );\n\n\t\treturn isLoweredCase && isSpaceless;\n\t}\n}\n\nfunction isValidResult( stepResults ) {\n\tif ( !stepResults || typeof stepResults !== 'object' ) {\n\t\treturn false;\n\t}\n\n\tconst isValidResults = stepResults.results && typeof stepResults.results === 'object';\n\tconst isValidReporter = typeof stepResults.reporter === 'function';\n\treturn isValidResults && isValidReporter;\n}\n\nexport default Runner;\n","/* eslint-disable no-console */\n\nimport chalk from 'chalk';\nimport EventEmitter from 'events';\nimport LoggerColor from './LoggerColor.js';\nimport LoggerType from './LoggerType.js';\nimport { version } from '../package.json';\n\nconst colorMethods = new Map( [\n\t[ LoggerColor.AUTO, ( value ) => {\n\t\treturn value;\n\t} ],\n\n\t[ LoggerColor.BLUE, ( value ) => {\n\t\treturn chalk.blue( value );\n\t} ],\n\n\t[ LoggerColor.YELLOW, ( value ) => {\n\t\treturn chalk.yellow( value );\n\t} ],\n\n\t[ LoggerColor.GREEN, ( value ) => {\n\t\treturn chalk.green( value );\n\t} ],\n\n\t[ LoggerColor.RED, ( value ) => {\n\t\treturn chalk.red( value );\n\t} ]\n] );\n\nclass Logger {\n\tconstructor( runner ) {\n\t\tif ( !( runner instanceof EventEmitter ) ) {\n\t\t\tthrow new TypeError( 'The passed runner parameter is not an EventEmitter instance' );\n\t\t}\n\n\t\tthis.runner = runner;\n\n\t\taddListeners( this );\n\t}\n\n\tlog( value, {\n\t\ttype = LoggerType.LOG,\n\t\tcolor = LoggerColor.AUTO\n\t} = {} ) {\n\t\tif ( !( type instanceof LoggerType ) ) {\n\t\t\tthrow new TypeError( 'Type option must be a LoggerType instance' );\n\t\t}\n\n\t\tif ( !( color instanceof LoggerColor ) ) {\n\t\t\tthrow new TypeError( 'Color option must a LoggerColor instance' );\n\t\t}\n\n\t\tconst consoleMethod = type === LoggerType.LOG ? 'log' : 'error';\n\t\tconst colorMethod = colorMethods.get( color );\n\n\t\tconsole[ consoleMethod ]( colorMethod( value ) );\n\t}\n\n\tonStart() {\n\t\tthis.log( `MLT v${ version }` );\n\t\tthis.log( 'Executing tests…', { color: LoggerColor.YELLOW } );\n\t}\n\n\tonStepStart( { name } ) {\n\t\tthis.log( `---${ name }---`, { color: LoggerColor.BLUE } );\n\t}\n\n\tonStepEnd( { name }, { ok, results, reporter } ) {\n\t\treporter( results, this );\n\n\t\tif ( !ok ) {\n\t\t\treturn this.log( `Step ${ chalk.bold( name ) } failed with errors. Skipping subsequent steps.`, {\n\t\t\t\tcolor: LoggerColor.RED,\n\t\t\t\ttype: LoggerType.ERROR\n\t\t\t} );\n\t\t}\n\n\t\tthis.log( `Step ${ chalk.bold( name ) } finished successfully.`, { color: LoggerColor.GREEN } );\n\t}\n\n\tonEnd( result ) {\n\t\tif ( !result ) {\n\t\t\treturn this.log( 'There were some errors alonside the way 😿', { color: LoggerColor.RED } );\n\t\t}\n\n\t\tthis.log( 'All steps finished correctly 🎉', { color: LoggerColor.GREEN } );\n\t}\n\n\tonError( error ) {\n\t\tthis.log( '🚨 Error occured:', {\n\t\t\tcolor: LoggerColor.RED,\n\t\t\ttype: LoggerType.ERROR\n\t\t} );\n\t\tthis.log( error, { type: LoggerType.ERROR } );\n\t}\n}\n\nfunction addListeners( logger ) {\n\tconst runner = logger.runner;\n\n\trunner.on( 'start', logger.onStart.bind( logger ) );\n\trunner.on( 'step:start', logger.onStepStart.bind( logger ) );\n\trunner.on( 'step:end', logger.onStepEnd.bind( logger ) );\n\trunner.on( 'end', logger.onEnd.bind( logger ) );\n\trunner.on( 'error', logger.onError.bind( logger ) );\n}\n\nexport default Logger;\n","/* istanbul ignore file */\nimport linter from './linter.js';\nimport tester from './tester.js';\nimport codeCoverage from './codeCoverage.js';\nimport codecov from './codecov.js';\nimport Runner from './Runner.js';\nimport Logger from './Logger.js';\n\nasync function mlt( steps = [ 'lint', 'test', 'coverage', 'codecov' ] ) {\n\tconst projectPath = process.cwd();\n\tconst defaultSteps = [\n\t\t{\n\t\t\tid: 'lint',\n\t\t\tname: 'Linter',\n\t\t\trun() {\n\t\t\t\treturn linter( projectPath );\n\t\t\t}\n\t\t},\n\n\t\t{\n\t\t\tid: 'test',\n\t\t\tname: 'Tester',\n\t\t\trun() {\n\t\t\t\treturn tester( projectPath );\n\t\t\t}\n\t\t},\n\n\t\t{\n\t\t\tid: 'coverage',\n\t\t\tname: 'Code Coverage',\n\t\t\trun() {\n\t\t\t\treturn codeCoverage( projectPath, global.__mltCoverage__ );\n\t\t\t}\n\t\t},\n\n\t\t{\n\t\t\tid: 'codecov',\n\t\t\tname: 'CodeCov',\n\t\t\trun() {\n\t\t\t\treturn codecov( projectPath );\n\t\t\t}\n\t\t}\n\t];\n\tconst filteredSteps = steps.map( ( id ) => {\n\t\tconst step = defaultSteps.find( ( { id: stepId } ) => {\n\t\t\treturn stepId === id;\n\t\t} );\n\n\t\treturn step || id;\n\t} );\n\tconst invalidSteps = filteredSteps.filter( ( step ) => {\n\t\treturn typeof step === 'string';\n\t} );\n\n\tif ( invalidSteps.length > 0 ) {\n\t\tconst stepNames = invalidSteps.map( ( step ) => {\n\t\t\treturn `\"${ step }\"`;\n\t\t} ).join( ', ' );\n\n\t\tthrow new TypeError( `Provided step names (${ stepNames }) are incorrect` );\n\t}\n\n\tconst runner = new Runner();\n\n\tnew Logger( runner );\n\trunner.addSteps( filteredSteps );\n\n\tconst result = await runner.run();\n\tconst exitCode = result ? 0 : 1;\n\n\treturn exitCode;\n}\n\nexport default mlt;\n","import { createCoverageMap } from 'istanbul-lib-coverage';\nimport codeCoverageReporter from './reporters/codeCoverage.js';\n\nfunction codeCoverage( projectPath, data ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tif ( !data || typeof data !== 'object' || Array.isArray( data ) ) {\n\t\tthrow new TypeError( 'Provided code coverage data must be an object' );\n\t}\n\n\tconst coverageMap = createCoverageMap( data );\n\n\treturn Promise.resolve( {\n\t\tname: 'code coverage',\n\t\tok: true,\n\t\tresults: coverageMap,\n\t\treporter: codeCoverageReporter( projectPath )\n\t} );\n}\n\nexport default codeCoverage;\n"],"names":["linterReporter","results","logger","log","formatter","linter","projectPath","length","TypeError","ESLint","useEslintrc","cwd","baseConfig","extends","overrideConfig","ignorePatterns","lintFiles","filter","candidate","globSync","then","name","ok","isOk","reporter","every","errorCount","Base","Spec","reporters","MochaReporter","constructor","runner","output","originalConsoleLog","consoleLog","args","push","format","on","file","state","title","once","suite","_","join","tester","testsPath","resolvePath","fixturesPath","addHook","code","exts","matcher","path","startsWith","addChaiHook","babelRegister","babelrc","presets","preset","targets","node","srcPath","instrumenter","createInstrumenter","coverageVariable","fileName","instrumentSync","addIstanbulHook","mocha","Mocha","timeout","ignore","realpath","forEach","test","addFile","Promise","resolve","run","codeCoverageReporter","coverageMap","context","libReport","createContext","dir","defaultSummarizer","watermarks","statements","functions","branches","lines","lcovReport","reports","create","textReport","execute","LoggerColor","Enumify","AUTO","BLUE","YELLOW","GREEN","RED","closeEnum","LoggerType","codecovReporter","skipped","color","stdout","stderr","type","ERROR","codecov","resultsTemplate","isCI","process","env","NO_CODECOV","Object","assign","codecovProcess","exec","npmRunPath","error","exitCode","executeCLI","LOG","stepsSymbol","Symbol","Runner","EventEmitter","freeze","Set","this","addStep","step","isValidStep","steps","add","addSteps","Array","isArray","emit","_processSteps","finish","result","shift","stepResults","isValidResults","isValidReporter","isValidResult","isIdValid","id","trim","isLoweredCase","toLowerCase","isSpaceless","isValidStepId","isNameValid","isRunValid","colorMethods","Map","value","chalk","blue","yellow","green","red","Logger","onStart","bind","onStepStart","onStepEnd","onEnd","onError","addListeners","consoleMethod","colorMethod","get","console","bold","async","mlt","defaultSteps","data","createCoverageMap","codeCoverage","global","__mltCoverage__","filteredSteps","map","find","stepId","invalidSteps","stepNames"],"mappings":"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"}