/*! @comandeer/mocha-lib-tester v0.1.0 | (c) 2020 Comandeer | MIT license (see LICENSE) */
"use strict";var e=require("chalk"),t=require("eslint"),r=require("glob"),o=require("mocha"),s=require("util"),n=require("path"),i=require("pirates"),a=require("@babel/register"),c=require("@babel/preset-env"),u=require("istanbul-lib-instrument"),l=require("istanbul-lib-coverage"),d=require("istanbul-lib-report"),p=require("istanbul-reports"),f=require("child_process"),m=require("is-ci");function g(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var h=g(e),b=g(o),v=g(a),y=g(c),w=g(d),C=g(p),x=g(m);function q(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");const o=new t.CLIEngine({useEslintrc:!1,cwd:e,ignorePattern:["tests/fixtures/**/*.js"],baseConfig:{extends:"@comandeer/eslint-config"}}),{results:s}=o.executeOnFiles((n=e,["src/**/*.js","bin/**/*","tests/**/*.js"].filter(e=>r.sync(e,{cwd:n}).length>0)));var n;return Promise.resolve({name:"linter",ok:E(s),results:s,reporter:o.getFormatter()})}function E(e){return e.every(({errorCount:e})=>0===e)}const{Base:j,Spec:k}=o.reporters;class P extends k{constructor(e){const t=[],r={};let o=!0;const n=j.consoleLog;j.consoleLog=function(...e){t.push(s.format(...e))},super(e),e.on("test end",({file:e,state:t,title:o})=>{void 0===r[e]&&(r[e]={}),r[e][o]=t}),e.once("fail",()=>{o=!1}),e.once("end",()=>{j.consoleLog=n,e.suite.results={results:r,ok:o,reporter(){console.log(t.join("\n"))}}})}}function _(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");!function(e){const t=n.resolve(e,"tests"),r=n.resolve(t,"fixtures");i.addHook(e=>"import { expect } from 'chai';\nimport { use as chaiUse } from 'chai';\nimport sinon from 'sinon';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinonChai from 'sinon-chai';\nimport { noCallThru as pqNoCallThru } from 'proxyquire';\n\nchaiUse( chaiAsPromised );\nchaiUse( sinonChai );\n\nconst proxyquire = pqNoCallThru();\n"+e,{exts:[".js"],matcher:e=>e.startsWith(t)&&!e.startsWith(r)})}(e),v.default({babelrc:!1,presets:[[y.default,{targets:{node:"12.0.0"}}]]}),function(e){const t=n.resolve(e,"src"),r=u.createInstrumenter({coverageVariable:"__mltCoverage__"});i.addHook((e,t)=>r.instrumentSync(e,t),{exts:[".js"],matcher:e=>e.startsWith(t)})}(e);const t=new b.default({reporter:P,timeout:15e3});var o;return(o=e,r.sync("tests/**/*.js",{cwd:o,ignore:["tests/fixtures/**/*.js","tests/helpers/**/*.js"],realpath:!0})).forEach(e=>{t.addFile(e)}),new Promise(e=>{t.run(()=>{e({name:"tester",...t.suite.results})})})}function T(e){return function(t){const r=w.default.createContext({dir:n.resolve(e,".coverage"),defaultSummarizer:"nested",watermarks:{statements:[50,80],functions:[50,80],branches:[50,80],lines:[50,80]},coverageMap:t}),o=C.default.create("lcovonly"),s=C.default.create("text");o.execute(r),s.execute(r)}}function L(e){e.skipped?console.log(h.default.yellow("CodeCov upload skipped")):console.log(e.stdout)}function O(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");const t={name:"codecov",reporter:L};return!x.default||process.env.NO_CODECOV?Object.assign({},t,{ok:!0,results:{skipped:!0}}):function(e){const t=n.resolve(__dirname,"..","node_modules","codecov","bin","codecov");return new Promise(r=>{const o=f.exec("node "+t,{cwd:e},(e,t,s)=>{r({exitCode:o.exitCode,stdout:t,stderr:s})})})}(e).then(({exitCode:e,stdout:r,stderr:o})=>Object.assign({},t,{ok:0===e,results:{stdout:r,stderr:o}}))}function A(e){return void 0!==e.results&&"function"==typeof e.reporter}module.exports=async function(){const e=process.cwd();console.log("MLT"),console.log(h.default.yellow("Executing testsâ€¦"));const t=[];let r=0;try{console.log(h.default.blue.bold("---Linter---"));o(await q(e)),console.log(h.default.blue.bold("---Tester---"));o(await _(e)),console.log(h.default.blue.bold("---Code Coverage---"));o(await function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");if(!t||"object"!=typeof t||Array.isArray(t))throw new TypeError("Provided code coverage data must be an object");const r=l.createCoverageMap(t);return Promise.resolve({name:"code coverage",ok:!0,results:r,reporter:T(e)})}(e,global.__mltCoverage__)),console.log(h.default.blue.bold("---CodeCov---"));o(await O(e))}catch({message:e}){r=1,console.error(h.default.red(`Error occured: ${e}. Skipping subsequent steps`))}finally{!function(e=[]){if(!e.every(A))throw new TypeError("Passed results must be of correct type");e.forEach(({results:e,reporter:t})=>{t(e)})}(t)}return r;function o(e){if(t.push(e),!e.ok)throw new Error(`Errors detected during ${e.name} step`);console.log(h.default.green(e.name+" step finished correctly."))}};
//# sourceMappingURL=mocha-lib-tester.js.map
