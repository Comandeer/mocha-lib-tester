/*! @comandeer/mocha-lib-tester v0.1.0 | (c) 2020 Comandeer | MIT license (see LICENSE) */
import e from"chalk";import{CLIEngine as t}from"eslint";import{sync as o}from"glob";import r,{reporters as s}from"mocha";import{format as n}from"util";import{resolve as i}from"path";import{addHook as c}from"pirates";import a from"@babel/register";import l from"@babel/preset-env";import{createInstrumenter as u}from"istanbul-lib-instrument";import{createCoverageMap as p}from"istanbul-lib-coverage";import m from"istanbul-lib-report";import d from"istanbul-reports";import{exec as f}from"child_process";import g from"is-ci";function h(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");const r=new t({useEslintrc:!1,cwd:e,ignorePattern:["tests/fixtures/**/*.js"],baseConfig:{extends:"@comandeer/eslint-config"}}),{results:s}=r.executeOnFiles((n=e,["src/**/*.js","bin/**/*","tests/**/*.js"].filter(e=>o(e,{cwd:n}).length>0)));var n;return Promise.resolve({name:"linter",ok:b(s),results:s,reporter:r.getFormatter()})}function b(e){return e.every(({errorCount:e})=>0===e)}const{Base:y,Spec:w}=s;class v extends w{constructor(e){const t=[],o={};let r=!0;const s=y.consoleLog;y.consoleLog=function(...e){t.push(n(...e))},super(e),e.on("test end",({file:e,state:t,title:r})=>{void 0===o[e]&&(o[e]={}),o[e][r]=t}),e.once("fail",()=>{r=!1}),e.once("end",()=>{y.consoleLog=s,e.suite.results={results:o,ok:r,reporter(){console.log(t.join("\n"))}}})}}function C(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");!function(e){const t=i(e,"tests"),o=i(t,"fixtures");c(e=>"import { expect } from 'chai';\nimport { use as chaiUse } from 'chai';\nimport sinon from 'sinon';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinonChai from 'sinon-chai';\nimport { noCallThru as pqNoCallThru } from 'proxyquire';\n\nchaiUse( chaiAsPromised );\nchaiUse( sinonChai );\n\nconst proxyquire = pqNoCallThru();\n"+e,{exts:[".js"],matcher:e=>e.startsWith(t)&&!e.startsWith(o)})}(e),a({babelrc:!1,presets:[[l,{targets:{node:"12.0.0"}}]]}),function(e){const t=i(e,"src"),o=u({coverageVariable:"__mltCoverage__"});c((e,t)=>o.instrumentSync(e,t),{exts:[".js"],matcher:e=>e.startsWith(t)})}(e);const t=new r({reporter:v,timeout:15e3});return o("tests/**/*.js",{cwd:e,ignore:["tests/fixtures/**/*.js","tests/helpers/**/*.js"],realpath:!0}).forEach(e=>{t.addFile(e)}),new Promise(e=>{t.run(()=>{e({name:"tester",...t.suite.results})})})}function x(e){return function(t){const o=m.createContext({dir:i(e,".coverage"),defaultSummarizer:"nested",watermarks:{statements:[50,80],functions:[50,80],branches:[50,80],lines:[50,80]},coverageMap:t}),r=d.create("lcovonly"),s=d.create("text");r.execute(o),s.execute(o)}}function E(t){t.skipped?console.log(e.yellow("CodeCov upload skipped")):console.log(t.stdout)}function j(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");const t={name:"codecov",reporter:E};return!g||process.env.NO_CODECOV?Object.assign({},t,{ok:!0,results:{skipped:!0}}):function(e){const t=i(__dirname,"..","node_modules","codecov","bin","codecov");return new Promise(o=>{const r=f("node "+t,{cwd:e},(e,t,s)=>{o({exitCode:r.exitCode,stdout:t,stderr:s})})})}(e).then(({exitCode:e,stdout:o,stderr:r})=>Object.assign({},t,{ok:0===e,results:{stdout:o,stderr:r}}))}function P(e){return void 0!==e.results&&"function"==typeof e.reporter}export default async function(){const t=process.cwd();console.log("MLT"),console.log(e.yellow("Executing testsâ€¦"));const o=[];let r=0;try{console.log(e.blue.bold("---Linter---"));s(await h(t)),console.log(e.blue.bold("---Tester---"));s(await C(t)),console.log(e.blue.bold("---Code Coverage---"));s(await function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");if(!t||"object"!=typeof t||Array.isArray(t))throw new TypeError("Provided code coverage data must be an object");const o=p(t);return Promise.resolve({name:"code coverage",ok:!0,results:o,reporter:x(e)})}(t,global.__mltCoverage__)),console.log(e.blue.bold("---CodeCov---"));s(await j(t))}catch({message:t}){r=1,console.error(e.red(`Error occured: ${t}. Skipping subsequent steps`))}finally{!function(e=[]){if(!e.every(P))throw new TypeError("Passed results must be of correct type");e.forEach(({results:e,reporter:t})=>{t(e)})}(o)}return r;function s(t){if(o.push(t),!t.ok)throw new Error(`Errors detected during ${t.name} step`);console.log(e.green(t.name+" step finished correctly."))}}
//# sourceMappingURL=mocha-lib-tester.es2015.js.map
