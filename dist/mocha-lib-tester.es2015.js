/*! @comandeer/mocha-lib-tester v0.4.0 | (c) 2021 Comandeer | MIT license (see LICENSE) */
import e from"events";import t from"chalk";import{Enumify as r}from"enumify";import o from"chokidar";import{ESLint as n}from"eslint";import{sync as s}from"glob";import i from"eslint/lib/cli-engine/formatters/stylish.js";import c,{reporters as a}from"mocha";import{format as u}from"util";import{resolve as p}from"path";import{addHook as h}from"pirates";import l from"@babel/register";import d from"@babel/preset-env";import{createInstrumenter as m}from"istanbul-lib-instrument";import{createCoverageMap as f}from"istanbul-lib-coverage";import g from"istanbul-lib-report";import w from"istanbul-reports";import{exec as y}from"child_process";import b from"is-ci";import E from"npm-run-path";const v=Symbol("steps");class S extends e{constructor(){super(),this[v]=Object.freeze(new Set)}get steps(){return this[v]}addStep(e){if(!T(e))throw new TypeError("Provided object must be a valid step definition");this.steps.add(e)}addSteps(e){if(!(Array.isArray(e)&&e.every((e=>T(e)))))throw new TypeError("Provided array must contain only valid step definitions");e.forEach((e=>{this.addStep(e)}))}run(e=process.cwd()){if(!("string"==typeof(t=e)&&t.trim().length>0))throw new TypeError("Provided path must be a non-empty string");var t;this.emit("start");const r=[...this.steps];return this._processSteps(r,e)}async _processSteps(e,t){const r=e=>(this.emit("end",e),e),o=e.shift();if(!o)return r(!0);this.emit("step:start",o);try{const n=await o.run(t);if(!function(e){if(!e||"object"!=typeof e)return!1;const t=e.results&&"object"==typeof e.results,r="function"==typeof e.reporter;return t&&r}(n))throw new TypeError(`Step ${o.name} didn't return correct results`);if(this.emit("step:end",o,n),!n.ok)return r(!1);if(0===e.length)return r(!0)}catch(e){return this.emit("error",e),r(!1)}return this._processSteps(e,t)}}function T(e){if(!e||"object"!=typeof e)return!1;const t=function(e){if("string"!=typeof e||0===e.trim().length)return!1;const t=e===e.toLowerCase(),r=!/\s/.test(e);return t&&r}(e.id),r="string"==typeof e.name&&e.name.trim().length>0,o="function"==typeof e.run;return t&&r&&o}class R extends r{}R.AUTO=new R,R.BLUE=new R,R.YELLOW=new R,R.GREEN=new R,R.RED=new R,R.closeEnum();class C extends r{}C.LOG=new C,C.ERROR=new C,C.closeEnum();const j=new Map([[R.AUTO,e=>e],[R.BLUE,e=>t.blue(e)],[R.YELLOW,e=>t.yellow(e)],[R.GREEN,e=>t.green(e)],[R.RED,e=>t.red(e)]]);class L{constructor(t){if(!(t instanceof e))throw new TypeError("The passed runner parameter is not an EventEmitter instance");this.runner=t,function(e){const t=e.runner;t.on("start",e.onStart.bind(e)),t.on("step:start",e.onStepStart.bind(e)),t.on("step:end",e.onStepEnd.bind(e)),t.on("end",e.onEnd.bind(e)),t.on("error",e.onError.bind(e))}(this)}log(e,{type:t=C.LOG,color:r=R.AUTO}={}){if(!(t instanceof C))throw new TypeError("Type option must be a LoggerType instance");if(!(r instanceof R))throw new TypeError("Color option must a LoggerColor instance");const o=t===C.LOG?"log":"error",n=j.get(r);console[o](n(e))}onStart(){this.log("Executing testsâ€¦",{color:R.YELLOW})}onStepStart({name:e}){this.log(`---${e}---`,{color:R.BLUE})}onStepEnd({name:e},{ok:r,results:o,reporter:n}){if(n(o,this),!r)return this.log(`Step ${t.bold(e)} failed with errors. Skipping subsequent steps.`,{color:R.RED,type:C.ERROR});this.log(`Step ${t.bold(e)} finished successfully.`,{color:R.GREEN})}onEnd(e){if(!e)return this.log("There were some errors alonside the way ðŸ˜¿",{color:R.RED});this.log("All steps finished correctly ðŸŽ‰",{color:R.GREEN})}onError(e){this.log("ðŸš¨ Error occured:",{color:R.RED,type:C.ERROR}),this.log(e,{type:C.ERROR})}}function O(e,t){t.log(i(e))}function x(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");return new n({useEslintrc:!1,cwd:e,baseConfig:{extends:"@comandeer/eslint-config"},overrideConfig:{ignorePatterns:["tests/fixtures/**/*.js"]}}).lintFiles((t=e,["src/**/*.js","bin/**/*","tests/**/*.js"].filter((e=>s(e,{cwd:t}).length>0)))).then((e=>({name:"linter",ok:k(e),results:e,reporter:O})));var t}function k(e){return e.every((({errorCount:e})=>0===e))}const{Base:P,Spec:_}=a;class W extends _{constructor(e){const t=[],r={};let o=!0;const n=P.consoleLog;P.consoleLog=function(...e){t.push(u(...e))},super(e),e.on("test end",(({file:e,state:t,title:o})=>{void 0===r[e]&&(r[e]={}),r[e][o]=t})),e.once("fail",(()=>{o=!1})),e.once("end",(()=>{P.consoleLog=n,e.suite.results={results:r,ok:o,reporter(e,r){r.log(t.join("\n"))}}}))}}const A='import{expect}from"chai";import{use as chaiUse}from"chai";import sinon from"sinon";import chaiAsPromised from"chai-as-promised";import sinonChai from"sinon-chai";import{noCallThru as pqNoCallThru}from"proxyquire";chaiUse(chaiAsPromised),chaiUse(sinonChai);const proxyquire=pqNoCallThru();',q=new Set;function U(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");var t;!function(e){if(q.has(e))return;const t=p(e,"tests"),r=p(t,"fixtures");h((e=>e.startsWith(A)?e:`${A}${e}`),{exts:[".js"],matcher:e=>e.startsWith(t)&&!e.startsWith(r)}),q.add(e)}(e),l({cache:!1,babelrc:!1,presets:[[d,{targets:{node:"12.0.0"}}]]}),function(e){const t=p(e,"src"),r=m({coverageVariable:"__mltCoverage__"});h(((e,t)=>r.instrumentSync(e,t)),{exts:[".js"],matcher:e=>e.startsWith(t)})}(e),t=e,Object.keys(require.cache).forEach((e=>{e.startsWith(t)&&delete require.cache[e]}));const r=new c({reporter:W,timeout:15e3});return s("tests/**/*.js",{cwd:e,ignore:["tests/fixtures/**/*.js","tests/helpers/**/*.js"],realpath:!0}).forEach((e=>{r.addFile(e)})),new Promise((e=>{r.run((()=>{e({name:"tester",...r.suite.results})}))}))}function $(e){return function(t){const r=g.createContext({dir:p(e,".coverage"),defaultSummarizer:"nested",watermarks:{statements:[50,80],functions:[50,80],branches:[50,80],lines:[50,80]},coverageMap:t}),o=w.create("lcovonly"),n=w.create("text");o.execute(r),n.execute(r)}}function D(e,t){e.skipped?t.log("CodeCov upload skipped",{color:R.YELLOW}):(t.log(e.stdout),e.stderr&&t.log(e.stderr,{type:C.ERROR,color:R.RED}))}function G(e){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");const t={name:"codecov",reporter:D};return!b||process.env.NO_CODECOV?Object.assign({},t,{ok:!0,results:{skipped:!0}}):function(e){return new Promise((t=>{const r=y("codecov",{cwd:e,env:E.env()},((e,o,n)=>{t({exitCode:r.exitCode,stdout:o,stderr:n})}))}))}(e).then((({exitCode:e,stdout:r,stderr:o})=>Object.assign({},t,{ok:0===e,results:{stdout:r,stderr:o}})))}const N=[{id:"lint",name:"Linter",watchable:!0,run:e=>x(e)},{id:"test",name:"Tester",watchable:!0,run:e=>U(e)},{id:"coverage",name:"Code Coverage",watchable:!0,run:e=>function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("Provided path must be a non-empty string");if(!t||"object"!=typeof t||Array.isArray(t))throw new TypeError("Provided code coverage data must be an object");const r=f(t);return Promise.resolve({name:"code coverage",ok:!0,results:r,reporter:$(e)})}(e,global.__mltCoverage__)},{id:"codecov",name:"CodeCov",watchable:!1,run:e=>G(e)}];const B=Symbol("config"),M=Symbol("bannerEmitted"),Y=Symbol("isInTheMiddleOfRun"),z=Symbol("scheduledRun");class F{constructor(e,t,r={}){if(!(e instanceof S))throw new TypeError("The runner parameter must be a valid Runner instance.");if(!(t instanceof L))throw new TypeError("The logger parameter must be a valid Logger instance.");if(!r||Array.isArray(r)||"object"!=typeof r)throw new TypeError("The config parameter must be an object.");this.runner=e,this.logger=t,this.watcher=null,this.continuous=!1,this[B]=r,this[M]=!1,this[Y]=!1,this._init(r)}async run(){if(this[M]||(this.logger.log("MLT v0.4.0"),this[M]=!0),this[Y])return;this[Y]=!0;const e=await this.runner.run(this.path)?0:1;return this[Y]=!1,e}watch(){const e=o.watch("{bin,src,tests}/**/*.js",{persistent:!0,ignoreInitial:!0,cwd:process.cwd()});return e.on("all",(()=>{this.scheduleRun()})),this.continuous=!0,this.watcher=e,e}scheduleRun(){if(!this[z]){if(!this[Y])return this.run();this[z]=!0,this.runner.once("end",(()=>{this[z]=!1,this.run()}))}}start(){return this[B].isWatch&&this.watch(),this.run()}_init({path:e=process.cwd(),requestedSteps:t=["lint","test","coverage","codecov"],isWatch:r=!1}={}){this.path=e;const o=function({requestedSteps:e,isWatch:t=!1}={}){const r=e.map((e=>N.find((t=>t.id===e))||e)),o=r.filter((e=>"string"==typeof e));if(o.length>0){const e=o.map((e=>`"${e}"`)).join(", ");throw new TypeError(`Provided step names (${e}) are incorrect`)}if(t)return r.filter((e=>e.watchable));return r}({requestedSteps:t,isWatch:r});this.runner.addSteps(o)}}function I(e){const t=new S,r=new L(t);return new F(t,r,e)}export default I;
//# sourceMappingURL=mocha-lib-tester.es2015.js.map
