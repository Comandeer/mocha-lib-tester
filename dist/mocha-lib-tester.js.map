{"version":3,"file":"mocha-lib-tester.js","sources":["../src/Runner.js","../src/LoggerColor.js","../src/LoggerType.js","../src/Logger.js","../src/reporters/linter.js","../src/linter.js","../src/reporters/MochaReporter.js","../src/hooks/chai.js","../src/tester.js","../src/hooks/babel.js","../src/hooks/istanbul.js","../src/reporters/codeCoverage.js","../src/reporters/codecov.js","../src/codecov.js","../src/steps.js","../src/codeCoverage.js","../src/RunController.js","../src/prepareSteps.js","../src/mlt.js"],"sourcesContent":["import EventEmitter from 'events';\n\nconst stepsSymbol = Symbol( 'steps' );\n\nclass Runner extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis[ stepsSymbol ] = Object.freeze( new Set() );\n\t}\n\n\tget steps() {\n\t\treturn this[ stepsSymbol ];\n\t}\n\n\taddStep( step ) {\n\t\tif ( !isValidStep( step ) ) {\n\t\t\tthrow new TypeError( 'Provided object must be a valid step definition' );\n\t\t}\n\n\t\tthis.steps.add( step );\n\t}\n\n\taddSteps( steps ) {\n\t\tconst isValidStepsArray = Array.isArray( steps ) && steps.every( ( step ) => {\n\t\t\treturn isValidStep( step );\n\t\t} );\n\n\t\tif ( !isValidStepsArray ) {\n\t\t\tthrow new TypeError( 'Provided array must contain only valid step definitions' );\n\t\t}\n\n\t\tsteps.forEach( ( step ) => {\n\t\t\tthis.addStep( step );\n\t\t} );\n\t}\n\n\trun( path = process.cwd() ) {\n\t\tif ( !isNonEmptyString( path ) ) {\n\t\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t\t}\n\n\t\tthis.emit( 'start' );\n\n\t\tconst steps = [ ...this.steps ];\n\n\t\treturn this._processSteps( steps, path );\n\t}\n\n\tasync _processSteps( steps, path ) {\n\t\tconst finish = ( result ) => {\n\t\t\tthis.emit( 'end', result );\n\n\t\t\treturn result;\n\t\t};\n\t\tconst step = steps.shift();\n\n\t\tif ( !step ) {\n\t\t\treturn finish( true );\n\t\t}\n\n\t\tthis.emit( 'step:start', step );\n\n\t\ttry {\n\t\t\tconst result = await step.run( path );\n\n\t\t\tif ( !isValidResult( result ) ) {\n\t\t\t\tthrow new TypeError( `Step ${ step.name } didn't return correct results` );\n\t\t\t}\n\n\t\t\tthis.emit( 'step:end', step, result );\n\n\t\t\tif ( !result.ok ) {\n\t\t\t\treturn finish( false );\n\t\t\t}\n\n\t\t\tif ( steps.length === 0 ) {\n\t\t\t\treturn finish( true );\n\t\t\t}\n\t\t} catch ( error ) {\n\t\t\tthis.emit( 'error', error );\n\n\t\t\treturn finish( false );\n\t\t}\n\n\t\treturn this._processSteps( steps, path );\n\t}\n}\n\nfunction isNonEmptyString( value ) {\n\treturn typeof value === 'string' && value.trim().length > 0;\n}\n\nfunction isValidStep( step ) {\n\tif ( !step || typeof step !== 'object' ) {\n\t\treturn false;\n\t}\n\n\tconst isIdValid = isValidStepId( step.id );\n\tconst isNameValid = typeof step.name === 'string' && step.name.trim().length > 0;\n\tconst isRunValid = typeof step.run === 'function';\n\n\treturn isIdValid && isNameValid && isRunValid;\n\n\tfunction isValidStepId( id ) {\n\t\tif ( typeof id !== 'string' || id.trim().length === 0 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst whiteSpaceRegex = /\\s/;\n\t\tconst isLoweredCase = id === id.toLowerCase();\n\t\tconst isSpaceless = !whiteSpaceRegex.test( id );\n\n\t\treturn isLoweredCase && isSpaceless;\n\t}\n}\n\nfunction isValidResult( stepResults ) {\n\tif ( !stepResults || typeof stepResults !== 'object' ) {\n\t\treturn false;\n\t}\n\n\tconst isValidResults = stepResults.results && typeof stepResults.results === 'object';\n\tconst isValidReporter = typeof stepResults.reporter === 'function';\n\treturn isValidResults && isValidReporter;\n}\n\nexport default Runner;\n","import { Enumify } from 'enumify';\n\nclass LoggerColor extends Enumify {}\n\nLoggerColor.AUTO = new LoggerColor();\nLoggerColor.BLUE = new LoggerColor();\nLoggerColor.YELLOW = new LoggerColor();\nLoggerColor.GREEN = new LoggerColor();\nLoggerColor.RED = new LoggerColor();\n\nLoggerColor.closeEnum();\n\nexport default LoggerColor;\n","import { Enumify } from 'enumify';\n\nclass LoggerType extends Enumify {}\n\nLoggerType.LOG = new LoggerType();\nLoggerType.ERROR = new LoggerType();\n\nLoggerType.closeEnum();\n\nexport default LoggerType;\n","/* eslint-disable no-console */\n\nimport EventEmitter from 'events';\nimport chalk from 'chalk';\nimport Gauge from 'gauge';\nimport LoggerColor from './LoggerColor.js';\nimport LoggerType from './LoggerType.js';\n\nconst colorMethods = new Map( [\n\t[ LoggerColor.AUTO, ( value ) => {\n\t\treturn value;\n\t} ],\n\n\t[ LoggerColor.BLUE, ( value ) => {\n\t\treturn chalk.blue( value );\n\t} ],\n\n\t[ LoggerColor.YELLOW, ( value ) => {\n\t\treturn chalk.yellow( value );\n\t} ],\n\n\t[ LoggerColor.GREEN, ( value ) => {\n\t\treturn chalk.green( value );\n\t} ],\n\n\t[ LoggerColor.RED, ( value ) => {\n\t\treturn chalk.red( value );\n\t} ]\n] );\nconst gauge = new Gauge( process.stdout, {\n\ttemplate: [\n\t\t{\n\t\t\ttype: 'activityIndicator',\n\t\t\tkerning: 1,\n\t\t\tlength: 1\n\t\t},\n\n\t\t{\n\t\t\ttype: 'section',\n\t\t\tkerning: 1,\n\t\t\tdefault: 'Workingâ€¦'\n\t\t}\n\t]\n} );\nlet gaugeTimeout;\n\nclass Logger {\n\tconstructor( runner ) {\n\t\tif ( !( runner instanceof EventEmitter ) ) {\n\t\t\tthrow new TypeError( 'The passed runner parameter is not an EventEmitter instance' );\n\t\t}\n\n\t\tthis.runner = runner;\n\n\t\taddListeners( this );\n\t}\n\n\tlog( value, {\n\t\ttype = LoggerType.LOG,\n\t\tcolor = LoggerColor.AUTO\n\t} = {} ) {\n\t\tif ( !( type instanceof LoggerType ) ) {\n\t\t\tthrow new TypeError( 'Type option must be a LoggerType instance' );\n\t\t}\n\n\t\tif ( !( color instanceof LoggerColor ) ) {\n\t\t\tthrow new TypeError( 'Color option must a LoggerColor instance' );\n\t\t}\n\n\t\tconst consoleMethod = type === LoggerType.LOG ? 'log' : 'error';\n\t\tconst colorMethod = colorMethods.get( color );\n\n\t\tconsole[ consoleMethod ]( colorMethod( value ) );\n\t}\n\n\tonStart() {\n\t\tthis.log( 'Executing testsâ€¦', { color: LoggerColor.YELLOW } );\n\t}\n\n\tonStepStart( { name } ) {\n\t\tthis.log( `---${ name }---`, { color: LoggerColor.BLUE } );\n\t\tshowGauge();\n\t}\n\n\tonStepEnd( { name }, { ok, results, reporter } ) {\n\t\thideGauge();\n\n\t\treporter( results, this );\n\n\t\tif ( !ok ) {\n\t\t\treturn this.log( `Step ${ chalk.bold( name ) } failed with errors. Skipping subsequent steps.`, {\n\t\t\t\tcolor: LoggerColor.RED,\n\t\t\t\ttype: LoggerType.ERROR\n\t\t\t} );\n\t\t}\n\n\t\tthis.log( `Step ${ chalk.bold( name ) } finished successfully.`, { color: LoggerColor.GREEN } );\n\t}\n\n\tonEnd( result ) {\n\t\tif ( !result ) {\n\t\t\treturn this.log( 'There were some errors alonside the way ðŸ˜¿', { color: LoggerColor.RED } );\n\t\t}\n\n\t\tthis.log( 'All steps finished correctly ðŸŽ‰', { color: LoggerColor.GREEN } );\n\t}\n\n\tonError( error ) {\n\t\tthis.log( 'ðŸš¨ Error occured:', {\n\t\t\tcolor: LoggerColor.RED,\n\t\t\ttype: LoggerType.ERROR\n\t\t} );\n\t\tthis.log( error, { type: LoggerType.ERROR } );\n\t}\n}\n\nfunction addListeners( logger ) {\n\tconst runner = logger.runner;\n\n\trunner.on( 'start', logger.onStart.bind( logger ) );\n\trunner.on( 'step:start', logger.onStepStart.bind( logger ) );\n\trunner.on( 'step:end', logger.onStepEnd.bind( logger ) );\n\trunner.on( 'end', logger.onEnd.bind( logger ) );\n\trunner.on( 'error', logger.onError.bind( logger ) );\n}\n\nfunction showGauge() {\n\tconst pulse = () => {\n\t\tgauge.pulse();\n\t\tgaugeTimeout = setTimeout( pulse, 500 );\n\t};\n\n\tgauge.show( 'Workingâ€¦' );\n\tpulse();\n}\n\nfunction hideGauge() {\n\tclearTimeout( gaugeTimeout );\n\tgauge.hide();\n\n\tgaugeTimeout = null;\n}\n\nexport default Logger;\n","/* eslint-disable no-console */\n/* istanbul ignore file */\n\nimport formatter from 'eslint/lib/cli-engine/formatters/stylish.js';\n\nfunction linterReporter( results, logger ) {\n\tlogger.log( formatter( results ) );\n}\n\nexport default linterReporter;\n","import { ESLint } from 'eslint';\nimport { sync as globSync } from 'glob';\nimport linterReporter from './reporters/linter';\n\nfunction linter( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst eslint = new ESLint( {\n\t\tuseEslintrc: false,\n\t\tcwd: projectPath,\n\t\tbaseConfig: {\n\t\t\textends: '@comandeer/eslint-config'\n\t\t},\n\t\toverrideConfig: {\n\t\t\tignorePatterns: [ 'tests/fixtures/**/*.js' ]\n\t\t}\n\t} );\n\n\treturn eslint.lintFiles( prepareExistentFilePaths( projectPath ) ).then( ( results ) => {\n\t\treturn {\n\t\t\tname: 'linter',\n\t\t\tok: isOk( results ),\n\t\t\tresults,\n\t\t\treporter: linterReporter\n\t\t};\n\t} );\n}\n\n// Workaround for https://eslint.org/docs/5.0.0/user-guide/migrating-to-5.0.0#nonexistent-files\nfunction prepareExistentFilePaths( cwd ) {\n\tconst candidates = [\n\t\t'src/**/*.js',\n\t\t'bin/**/*',\n\t\t'tests/**/*.js'\n\t];\n\n\treturn candidates.filter( ( candidate ) => {\n\t\tconst found = globSync( candidate, {\n\t\t\tcwd\n\t\t} );\n\n\t\treturn found.length > 0;\n\t} );\n}\n\nfunction isOk( results ) {\n\treturn results.every( ( { errorCount } ) => {\n\t\treturn errorCount === 0;\n\t} );\n}\n\nexport default linter;\n","/* eslint-disable no-console */\n\nimport { format } from 'util';\nimport { reporters } from 'mocha';\n\nconst { Base, Spec } = reporters;\n\nclass MochaReporter extends Spec {\n\tconstructor( runner ) {\n\t\tconst output = [];\n\t\tconst results = {};\n\t\tlet ok = true;\n\t\tconst originalConsoleLog = Base.consoleLog;\n\n\t\tBase.consoleLog = function( ...args ) {\n\t\t\toutput.push( format( ...args ) );\n\t\t};\n\n\t\tsuper( runner );\n\n\t\trunner.on( 'test end', ( { file, state, title } ) => {\n\t\t\tif ( typeof results[ file ] === 'undefined' ) {\n\t\t\t\tresults[ file ] = {};\n\t\t\t}\n\n\t\t\tresults[ file ][ title ] = state;\n\t\t} );\n\n\t\trunner.once( 'fail', () => {\n\t\t\tok = false;\n\t\t} );\n\n\t\trunner.once( 'end', () => {\n\t\t\tBase.consoleLog = originalConsoleLog;\n\n\t\t\trunner.suite.results = {\n\t\t\t\tresults,\n\t\t\t\tok,\n\t\t\t\treporter( _, logger ) {\n\t\t\t\t\tlogger.log( output.join( '\\n' ) );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n}\n\nexport default MochaReporter;\n","import { resolve as resolvePath } from 'path';\nimport { addHook } from 'pirates';\nconst chaiPreamble = 'import{expect}from\"chai\";import{use as chaiUse}from\"chai\";import sinon from\"sinon\";import chaiAsPromised from\"chai-as-promised\";import sinonChai from\"sinon-chai\";import{noCallThru as pqNoCallThru}from\"proxyquire\";chaiUse(chaiAsPromised),chaiUse(sinonChai);const proxyquire=pqNoCallThru();';\nconst added = new Set();\n\nfunction addChaiHook( projectPath ) {\n\tif ( added.has( projectPath ) ) {\n\t\treturn;\n\t}\n\n\tconst testsPath = resolvePath( projectPath, 'tests' );\n\tconst fixturesPath = resolvePath( testsPath, 'fixtures' );\n\taddHook( ( code ) => {\n\t\tif ( code.startsWith( chaiPreamble ) ) {\n\t\t\treturn code;\n\t\t}\n\n\t\treturn `${chaiPreamble}${code}`;\n\t}, {\n\t\texts: [ '.js' ],\n\n\t\tmatcher( path ) {\n\t\t\treturn path.startsWith( testsPath ) && !path.startsWith( fixturesPath );\n\t\t}\n\n\t} );\n\tadded.add( projectPath );\n}\n\nexport default addChaiHook;\n","import Mocha from 'mocha';\nimport { sync as globSync } from 'glob';\nimport MochaReporter from './reporters/MochaReporter.js';\nimport addChaiHook from './hooks/chai.js';\nimport addBabelHook from './hooks/babel.js';\nimport addIstanbulHook from './hooks/istanbul.js';\n\nfunction tester( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\taddChaiHook( projectPath );\n\taddBabelHook( projectPath );\n\taddIstanbulHook( projectPath );\n\tclearCache( projectPath );\n\n\tconst mocha = new Mocha( {\n\t\treporter: MochaReporter,\n\t\ttimeout: 15000\n\t} );\n\tconst tests = findTestFiles( projectPath );\n\n\ttests.forEach( ( test ) => {\n\t\tmocha.addFile( test );\n\t} );\n\n\treturn new Promise( ( resolve ) => {\n\t\tmocha.run( () => {\n\t\t\tresolve( {\n\t\t\t\tname: 'tester',\n\t\t\t\t...mocha.suite.results\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nfunction findTestFiles( cwd ) {\n\treturn globSync( 'tests/**/*.js', {\n\t\tcwd,\n\t\tignore: [\n\t\t\t'tests/fixtures/**/*.js',\n\t\t\t'tests/helpers/**/*.js'\n\t\t],\n\t\trealpath: true\n\t} );\n}\n\nfunction clearCache( path ) {\n\tObject.keys( require.cache ).forEach( ( key ) => {\n\t\tif ( key.startsWith( path ) ) {\n\t\t\tdelete require.cache[ key ];\n\t\t}\n\t} );\n}\n\nexport default tester;\n","import babelRegister from '@babel/register';\nimport preset from '@babel/preset-env';\n\nfunction addBabelHook() {\n\tbabelRegister( {\n\t\tcache: false,\n\t\tbabelrc: false,\n\t\tpresets: [\n\t\t\t[\n\t\t\t\tpreset,\n\t\t\t\t{\n\t\t\t\t\ttargets: {\n\t\t\t\t\t\tnode: '12.0.0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t} );\n}\n\nexport default addBabelHook;\n","import { resolve as resolvePath } from 'path';\nimport { createInstrumenter } from 'istanbul-lib-instrument';\nimport { addHook } from 'pirates';\n\nfunction addIstanbulHook( projectPath ) {\n\tconst srcPath = resolvePath( projectPath, 'src' );\n\tconst instrumenter = createInstrumenter( {\n\t\tcoverageVariable: '__mltCoverage__'\n\t} );\n\n\taddHook(\n\t\t( code, fileName ) => {\n\t\t\treturn instrumenter.instrumentSync( code, fileName );\n\t\t},\n\n\t\t{\n\t\t\texts: [ '.js' ],\n\t\t\tmatcher( path ) {\n\t\t\t\treturn path.startsWith( srcPath );\n\t\t\t}\n\t\t}\n\t);\n}\n\nexport default addIstanbulHook;\n","import { resolve as resolvePath } from 'path';\nimport libReport from 'istanbul-lib-report';\nimport reports from 'istanbul-reports';\n\nfunction codeCoverageReporter( projectPath ) {\n\treturn function( coverageMap ) {\n\t\tconst configWatermarks = {\n\t\t\tstatements: [ 50, 80 ],\n\t\t\tfunctions: [ 50, 80 ],\n\t\t\tbranches: [ 50, 80 ],\n\t\t\tlines: [ 50, 80 ]\n\t\t};\n\t\tconst context = libReport.createContext( {\n\t\t\tdir: resolvePath( projectPath, '.coverage' ),\n\t\t\tdefaultSummarizer: 'nested',\n\t\t\twatermarks: configWatermarks,\n\t\t\tcoverageMap\n\t\t} );\n\t\tconst lcovReport = reports.create( 'lcovonly' );\n\t\tconst textReport = reports.create( 'text' );\n\n\t\tlcovReport.execute( context );\n\t\ttextReport.execute( context );\n\t};\n}\n\nexport default codeCoverageReporter;\n","/* eslint-disable no-console */\n/* istanbul ignore file */\n\nimport LoggerColor from  '../LoggerColor.js';\nimport LoggerType from '../LoggerType.js';\n\nfunction codecovReporter( results, logger ) {\n\tif ( results.skipped ) {\n\t\tlogger.log( 'CodeCov upload skipped', {\n\t\t\tcolor: LoggerColor.YELLOW\n\t\t} );\n\n\t\treturn;\n\t}\n\n\tlogger.log( results.stdout );\n\n\tif ( results.stderr ) {\n\t\tlogger.log( results.stderr, {\n\t\t\ttype: LoggerType.ERROR,\n\t\t\tcolor: LoggerColor.RED\n\t\t} );\n\t}\n}\n\nexport default codecovReporter;\n","/* istanbul ignore file */\n\nimport { exec } from 'child_process';\nimport isCI from 'is-ci';\nimport npmRunPath from 'npm-run-path';\nimport codecovReporter from './reporters/codecov.js';\n\nfunction codecov( projectPath ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tconst resultsTemplate = {\n\t\tname: 'codecov',\n\t\treporter: codecovReporter\n\t};\n\n\tif ( !isCI || process.env.NO_CODECOV ) {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: true,\n\t\t\tresults: {\n\t\t\t\tskipped: true\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn executeCLI( projectPath ).then( ( { exitCode, stdout, stderr } ) => {\n\t\treturn Object.assign( {}, resultsTemplate, {\n\t\t\tok: exitCode === 0,\n\t\t\tresults: {\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t}\n\t\t} );\n\t} );\n}\n\nfunction executeCLI( projectPath ) {\n\treturn new Promise( ( resolve ) => {\n\t\tconst codecovProcess = exec( 'codecov', {\n\t\t\tcwd: projectPath,\n\t\t\tenv: npmRunPath.env()\n\t\t}, ( error, stdout, stderr ) => {\n\t\t\tresolve( {\n\t\t\t\texitCode: codecovProcess.exitCode,\n\t\t\t\tstdout,\n\t\t\t\tstderr\n\t\t\t} );\n\t\t} );\n\t} );\n}\n\nexport default codecov;\n","/* istanbul ignore file */\n\nimport linter from './linter.js';\nimport tester from './tester.js';\nimport codeCoverage from './codeCoverage.js';\nimport codecov from './codecov.js';\n\nconst steps = [\n\t{\n\t\tid: 'lint',\n\t\tname: 'Linter',\n\t\twatchable: true,\n\t\trun( projectPath ) {\n\t\t\treturn linter( projectPath );\n\t\t}\n\t},\n\n\t{\n\t\tid: 'test',\n\t\tname: 'Tester',\n\t\twatchable: true,\n\t\trun( projectPath ) {\n\t\t\treturn tester( projectPath );\n\t\t}\n\t},\n\n\t{\n\t\tid: 'coverage',\n\t\tname: 'Code Coverage',\n\t\twatchable: true,\n\t\trun( projectPath ) {\n\t\t\treturn codeCoverage( projectPath, global.__mltCoverage__ );\n\t\t}\n\t},\n\n\t{\n\t\tid: 'codecov',\n\t\tname: 'CodeCov',\n\t\twatchable: false,\n\t\trun( projectPath ) {\n\t\t\treturn codecov( projectPath );\n\t\t}\n\t}\n];\n\nexport default steps;\n","import { createCoverageMap } from 'istanbul-lib-coverage';\nimport codeCoverageReporter from './reporters/codeCoverage.js';\n\nfunction codeCoverage( projectPath, data ) {\n\tif ( typeof projectPath !== 'string' || projectPath.length === 0 ) {\n\t\tthrow new TypeError( 'Provided path must be a non-empty string' );\n\t}\n\n\tif ( !data || typeof data !== 'object' || Array.isArray( data ) ) {\n\t\tthrow new TypeError( 'Provided code coverage data must be an object' );\n\t}\n\n\tconst coverageMap = createCoverageMap( data );\n\n\treturn Promise.resolve( {\n\t\tname: 'code coverage',\n\t\tok: true,\n\t\tresults: coverageMap,\n\t\treporter: codeCoverageReporter( projectPath )\n\t} );\n}\n\nexport default codeCoverage;\n","import chokidar from 'chokidar';\nimport Logger from './Logger.js';\nimport Runner from './Runner.js';\nimport prepareSteps from './prepareSteps.js';\nimport { version } from '../package.json';\n\nconst configSymbol = Symbol( 'config' );\nconst bannerEmittedSymbol = Symbol( 'bannerEmitted' );\nconst isInTheMiddleOfRunSymbol = Symbol( 'isInTheMiddleOfRun' );\nconst scheduledRunSymbol = Symbol( 'scheduledRun' );\n\nclass RunController {\n\tconstructor( runner, logger, config = {} ) {\n\t\tif ( !( runner instanceof Runner ) ) {\n\t\t\tthrow new TypeError( 'The runner parameter must be a valid Runner instance.' );\n\t\t}\n\n\t\tif ( !( logger instanceof Logger ) ) {\n\t\t\tthrow new TypeError( 'The logger parameter must be a valid Logger instance.' );\n\t\t}\n\n\t\tif ( !config || Array.isArray( config ) || typeof config !== 'object' ) {\n\t\t\tthrow new TypeError( 'The config parameter must be an object.' );\n\t\t}\n\n\t\tthis.runner = runner;\n\t\tthis.logger = logger;\n\t\tthis.watcher = null;\n\t\tthis.continuous = false;\n\t\tthis[ configSymbol ] = config;\n\t\tthis[ bannerEmittedSymbol ] = false;\n\t\tthis[ isInTheMiddleOfRunSymbol ] = false;\n\n\t\tthis._init( config );\n\t}\n\n\tasync run() {\n\t\tif ( !this[ bannerEmittedSymbol ] ) {\n\t\t\tthis.logger.log( `MLT v${ version }` );\n\n\t\t\tthis[ bannerEmittedSymbol ] = true;\n\t\t}\n\n\t\tif ( this[ isInTheMiddleOfRunSymbol ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis[ isInTheMiddleOfRunSymbol ] = true;\n\n\t\tconst result = await this.runner.run( this.path );\n\t\tconst exitCode = result ? 0 : 1;\n\n\t\tthis[ isInTheMiddleOfRunSymbol ] = false;\n\n\t\treturn exitCode;\n\t}\n\n\twatch() {\n\t\tconst watcher = chokidar.watch( '{bin,src,tests}/**/*.js', {\n\t\t\tpersistent: true,\n\t\t\tignoreInitial: true,\n\t\t\tcwd: process.cwd()\n\t\t} );\n\n\t\twatcher.on( 'all', () => {\n\t\t\tthis.scheduleRun();\n\t\t} );\n\n\t\tthis.continuous = true;\n\t\tthis.watcher = watcher;\n\n\t\treturn watcher;\n\t}\n\n\tscheduleRun() {\n\t\tif ( this[ scheduledRunSymbol ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this[ isInTheMiddleOfRunSymbol ] ) {\n\t\t\treturn this.run();\n\t\t}\n\n\t\tthis[ scheduledRunSymbol ] = true;\n\n\t\tthis.runner.once( 'end', () => {\n\t\t\tthis[ scheduledRunSymbol ] = false;\n\t\t\tthis.run();\n\t\t} );\n\t}\n\n\tstart() {\n\t\tconst isWatch = this[ configSymbol ].isWatch;\n\n\t\tif ( isWatch ) {\n\t\t\tthis.watch();\n\t\t}\n\n\t\treturn this.run();\n\t}\n\n\t_init( {\n\t\tpath = process.cwd(),\n\t\trequestedSteps = [ 'lint', 'test', 'coverage', 'codecov' ],\n\t\tisWatch = false\n\t} = {} ) {\n\t\tthis.path = path;\n\n\t\tconst preparedSteps = prepareSteps ( {\n\t\t\trequestedSteps,\n\t\t\tisWatch\n\t\t} );\n\n\t\tthis.runner.addSteps( preparedSteps );\n\t}\n}\n\nexport default RunController;\n","import steps from './steps.js';\n\nfunction prepareSteps( {\n\trequestedSteps,\n\tisWatch = false\n} = {} ) {\n\tconst filteredSteps = requestedSteps.map( ( id ) => {\n\t\tconst step = steps.find( ( step ) => {\n\t\t\treturn step.id === id;\n\t\t} );\n\n\t\treturn step || id;\n\t} );\n\tconst invalidSteps = filteredSteps.filter( ( step ) => {\n\t\treturn typeof step === 'string';\n\t} );\n\n\tif ( invalidSteps.length > 0 ) {\n\t\tconst stepNames = invalidSteps.map( ( step ) => {\n\t\t\treturn `\"${ step }\"`;\n\t\t} ).join( ', ' );\n\n\t\tthrow new TypeError( `Provided step names (${ stepNames }) are incorrect` );\n\t}\n\n\tif ( isWatch ) {\n\t\tconst watchableSteps = filteredSteps.filter( ( step ) => {\n\t\t\treturn step.watchable;\n\t\t} );\n\n\t\treturn watchableSteps;\n\t}\n\n\treturn filteredSteps;\n}\n\nexport default prepareSteps;\n","/* istanbul ignore file */\n\nimport Runner from './Runner.js';\nimport Logger from './Logger.js';\nimport RunController from './RunController.js';\n\nfunction mlt( config ) {\n\tconst runner = new Runner();\n\tconst logger = new Logger( runner );\n\tconst controller = new RunController( runner, logger, config );\n\n\treturn controller;\n}\n\nexport default mlt;\n"],"names":["stepsSymbol","Symbol","Runner","EventEmitter","constructor","Object","freeze","Set","this","addStep","step","isValidStep","TypeError","steps","add","addSteps","Array","isArray","every","forEach","run","path","process","cwd","value","trim","length","emit","_processSteps","finish","result","shift","stepResults","isValidResults","results","isValidReporter","reporter","isValidResult","name","ok","error","isIdValid","id","isLoweredCase","toLowerCase","isSpaceless","test","isValidStepId","isNameValid","isRunValid","LoggerColor","Enumify","AUTO","BLUE","YELLOW","GREEN","RED","closeEnum","LoggerType","LOG","ERROR","colorMethods","Map","chalk","blue","yellow","green","red","gauge","Gauge","stdout","template","type","kerning","default","gaugeTimeout","Logger","runner","logger","on","onStart","bind","onStepStart","onStepEnd","onEnd","onError","addListeners","log","color","consoleMethod","colorMethod","get","console","pulse","setTimeout","show","showGauge","clearTimeout","hide","bold","linterReporter","formatter","linter","projectPath","ESLint","useEslintrc","baseConfig","extends","overrideConfig","ignorePatterns","lintFiles","filter","candidate","globSync","then","isOk","errorCount","Base","Spec","reporters","MochaReporter","output","originalConsoleLog","consoleLog","args","push","format","file","state","title","once","suite","_","join","chaiPreamble","added","tester","has","testsPath","resolvePath","fixturesPath","addHook","code","startsWith","exts","matcher","addChaiHook","babelRegister","cache","babelrc","presets","preset","targets","node","srcPath","instrumenter","createInstrumenter","coverageVariable","fileName","instrumentSync","addIstanbulHook","keys","require","key","clearCache","mocha","Mocha","timeout","ignore","realpath","addFile","Promise","resolve","codeCoverageReporter","coverageMap","context","libReport","createContext","dir","defaultSummarizer","watermarks","statements","functions","branches","lines","lcovReport","reports","create","textReport","execute","codecovReporter","skipped","stderr","codecov","resultsTemplate","isCI","env","NO_CODECOV","assign","codecovProcess","exec","npmRunPath","exitCode","executeCLI","watchable","data","createCoverageMap","codeCoverage","global","__mltCoverage__","configSymbol","bannerEmittedSymbol","isInTheMiddleOfRunSymbol","scheduledRunSymbol","RunController","config","watcher","continuous","_init","watch","chokidar","persistent","ignoreInitial","scheduleRun","start","isWatch","requestedSteps","preparedSteps","filteredSteps","map","find","invalidSteps","stepNames","prepareSteps"],"mappings":";4sBAEA,MAAMA,EAAcC,OAAQ,SAE5B,MAAMC,UAAeC,UACpBC,2BAGOJ,GAAgBK,OAAOC,OAAQ,IAAIC,wBAIlCC,KAAMR,GAGdS,QAASC,OACFC,EAAaD,SACZ,IAAIE,UAAW,wDAGjBC,MAAMC,IAAKJ,GAGjBK,SAAUF,QACiBG,MAAMC,QAASJ,IAAWA,EAAMK,OAASR,GAC3DC,EAAaD,YAId,IAAIE,UAAW,2DAGtBC,EAAMM,SAAWT,SACXD,QAASC,MAIhBU,IAAKC,EAAOC,QAAQC,YAqDI,iBADEC,EAnDDH,IAoDWG,EAAMC,OAAOC,OAAS,SAnDlD,IAAId,UAAW,4CAkDxB,IAA2BY,OA/CpBG,KAAM,eAELd,EAAQ,IAAKL,KAAKK,cAEjBL,KAAKoB,cAAef,EAAOQ,uBAGdR,EAAOQ,SACrBQ,EAAWC,SACXH,KAAM,MAAOG,GAEXA,GAEFpB,EAAOG,EAAMkB,YAEbrB,SACEmB,GAAQ,QAGXF,KAAM,aAAcjB,aAGlBoB,QAAepB,EAAKU,IAAKC,OAqDlC,SAAwBW,OACjBA,GAAsC,iBAAhBA,SACpB,QAGFC,EAAiBD,EAAYE,SAA0C,iBAAxBF,EAAYE,QAC3DC,EAAkD,mBAAzBH,EAAYI,gBACpCH,GAAkBE,EA1DjBE,CAAeP,SACd,IAAIlB,UAAY,QAAQF,EAAK4B,8CAG/BX,KAAM,WAAYjB,EAAMoB,IAEvBA,EAAOS,UACLV,GAAQ,MAGM,IAAjBhB,EAAMa,cACHG,GAAQ,GAEf,MAAQW,eACJb,KAAM,QAASa,GAEbX,GAAQ,UAGTrB,KAAKoB,cAAef,EAAOQ,IAQpC,SAASV,EAAaD,OACfA,GAAwB,iBAATA,SACb,QAGF+B,WAMkBC,MACJ,iBAAPA,GAAwC,IAArBA,EAAGjB,OAAOC,cACjC,QAIFiB,EAAgBD,IAAOA,EAAGE,cAC1BC,GAFkB,KAEaC,KAAMJ,UAEpCC,GAAiBE,EAfPE,CAAerC,EAAKgC,IAChCM,EAAmC,iBAAdtC,EAAK4B,MAAqB5B,EAAK4B,KAAKb,OAAOC,OAAS,EACzEuB,EAAiC,mBAAbvC,EAAKU,WAExBqB,GAAaO,GAAeC,ECpGpC,MAAMC,UAAoBC,WAE1BD,EAAYE,KAAO,IAAIF,EACvBA,EAAYG,KAAO,IAAIH,EACvBA,EAAYI,OAAS,IAAIJ,EACzBA,EAAYK,MAAQ,IAAIL,EACxBA,EAAYM,IAAM,IAAIN,EAEtBA,EAAYO,YCRZ,MAAMC,UAAmBP,WAEzBO,EAAWC,IAAM,IAAID,EACrBA,EAAWE,MAAQ,IAAIF,EAEvBA,EAAWD,YCCX,MAAMI,EAAe,IAAIC,IAAK,CAC7B,CAAEZ,EAAYE,KAAQ5B,GACdA,GAGR,CAAE0B,EAAYG,KAAQ7B,GACduC,UAAMC,KAAMxC,IAGpB,CAAE0B,EAAYI,OAAU9B,GAChBuC,UAAME,OAAQzC,IAGtB,CAAE0B,EAAYK,MAAS/B,GACfuC,UAAMG,MAAO1C,IAGrB,CAAE0B,EAAYM,IAAOhC,GACbuC,UAAMI,IAAK3C,MAGd4C,EAAQ,IAAIC,UAAO/C,QAAQgD,OAAQ,CACxCC,SAAU,CACT,CACCC,KAAM,oBACNC,QAAS,EACT/C,OAAQ,GAGT,CACC8C,KAAM,UACNC,QAAS,EACTC,QAAS,eAIZ,IAAIC,EAEJ,MAAMC,EACLxE,YAAayE,QACJA,aAAkB1E,iBACnB,IAAIS,UAAW,oEAGjBiE,OAASA,EAgEhB,SAAuBC,SAChBD,EAASC,EAAOD,OAEtBA,EAAOE,GAAI,QAASD,EAAOE,QAAQC,KAAMH,IACzCD,EAAOE,GAAI,aAAcD,EAAOI,YAAYD,KAAMH,IAClDD,EAAOE,GAAI,WAAYD,EAAOK,UAAUF,KAAMH,IAC9CD,EAAOE,GAAI,MAAOD,EAAOM,MAAMH,KAAMH,IACrCD,EAAOE,GAAI,QAASD,EAAOO,QAAQJ,KAAMH,IArExCQ,CAAc9E,MAGf+E,IAAK/D,GAAOgD,KACXA,EAAOd,EAAWC,IADP6B,MAEXA,EAAQtC,EAAYE,MACjB,SACKoB,aAAgBd,SACjB,IAAI9C,UAAW,kDAGd4E,aAAiBtC,SAClB,IAAItC,UAAW,kDAGhB6E,EAAgBjB,IAASd,EAAWC,IAAM,MAAQ,QAClD+B,EAAc7B,EAAa8B,IAAKH,GAEtCI,QAASH,GAAiBC,EAAalE,IAGxCwD,eACMO,IAAK,mBAAoB,CAAEC,MAAOtC,EAAYI,SAGpD4B,aAAa5C,KAAEA,SACTiD,IAAM,MAAMjD,OAAY,CAAEkD,MAAOtC,EAAYG,OA8CpD,iBACOwC,EAAQ,KACbzB,EAAMyB,QACNlB,EAAemB,WAAYD,EAAO,MAGnCzB,EAAM2B,KAAM,YACZF,IApDCG,GAGDb,WAAW7C,KAAEA,IAAQC,GAAEA,EAAFL,QAAMA,EAANE,SAAeA,OAqDpC6D,aAActB,GACdP,EAAM8B,OAENvB,EAAe,KArDdvC,EAAUF,EAAS1B,OAEb+B,SACE/B,KAAK+E,IAAM,QAAQxB,UAAMoC,KAAM7D,oDAA0D,CAC/FkD,MAAOtC,EAAYM,IACnBgB,KAAMd,EAAWE,aAId2B,IAAM,QAAQxB,UAAMoC,KAAM7D,4BAAkC,CAAEkD,MAAOtC,EAAYK,QAGvF6B,MAAOtD,OACAA,SACEtB,KAAK+E,IAAK,6CAA8C,CAAEC,MAAOtC,EAAYM,WAGhF+B,IAAK,kCAAmC,CAAEC,MAAOtC,EAAYK,QAGnE8B,QAAS7C,QACH+C,IAAK,oBAAqB,CAC9BC,MAAOtC,EAAYM,IACnBgB,KAAMd,EAAWE,aAEb2B,IAAK/C,EAAO,CAAEgC,KAAMd,EAAWE,SC3GtC,SAASwC,EAAgBlE,EAAS4C,GACjCA,EAAOS,IAAKc,UAAWnE,ICFxB,SAASoE,EAAQC,MACY,iBAAhBA,GAAmD,IAAvBA,EAAY7E,aAC7C,IAAId,UAAW,mDAGP,IAAI4F,SAAQ,CAC1BC,aAAa,EACblF,IAAKgF,EACLG,WAAY,CACXC,QAAS,4BAEVC,eAAgB,CACfC,eAAgB,CAAE,6BAINC,WAWoBvF,EAXiBgF,EAYhC,CAClB,cACA,WACA,iBAGiBQ,QAAUC,GACbC,OAAUD,EAAW,CAClCzF,IAAAA,IAGYG,OAAS,MAvB4CwF,MAAQhF,IACnE,CACNI,KAAM,SACNC,GAAI4E,EAAMjF,GACVA,QAAAA,EACAE,SAAUgE,MAMb,IAAmC7E,EAgBnC,SAAS4F,EAAMjF,UACPA,EAAQhB,OAAO,EAAIkG,WAAAA,KACH,IAAfA,IC5CT,MAAMC,KAAEA,EAAFC,KAAQA,GAASC,YAEvB,MAAMC,UAAsBF,EAC3BlH,YAAayE,SACN4C,EAAS,GACTvF,EAAU,OACZK,GAAK,QACHmF,EAAqBL,EAAKM,WAEhCN,EAAKM,WAAa,YAAaC,GAC9BH,EAAOI,KAAMC,YAAWF,WAGlB/C,GAEPA,EAAOE,GAAI,YAAY,EAAIgD,KAAAA,EAAMC,MAAAA,EAAOC,MAAAA,WACP,IAApB/F,EAAS6F,KACpB7F,EAAS6F,GAAS,IAGnB7F,EAAS6F,GAAQE,GAAUD,KAG5BnD,EAAOqD,KAAM,QAAQ,KACpB3F,GAAK,KAGNsC,EAAOqD,KAAM,OAAO,KACnBb,EAAKM,WAAaD,EAElB7C,EAAOsD,MAAMjG,QAAU,CACtBA,QAAAA,EACAK,GAAAA,EACAH,SAAUgG,EAAGtD,GACZA,EAAOS,IAAKkC,EAAOY,KAAM,aCrC9B,MAAMC,EAAe,mSACfC,EAAQ,IAAIhI,ICIlB,SAASiI,EAAQjC,MACY,iBAAhBA,GAAmD,IAAvBA,EAAY7E,aAC7C,IAAId,UAAW,6CDJvB,SAAsB2F,MAChBgC,EAAME,IAAKlC,gBAIVmC,EAAYC,UAAapC,EAAa,SACtCqC,EAAeD,UAAaD,EAAW,YAC7CG,WAAWC,GACLA,EAAKC,WAAYT,GACdQ,EAGA,GAAER,IAAeQ,KACvB,CACFE,KAAM,CAAE,OAERC,QAAS5H,GACDA,EAAK0H,WAAYL,KAAgBrH,EAAK0H,WAAYH,KAI3DL,EAAMzH,IAAKyF,GCdX2C,CAAa3C,GCRb4C,UAAe,CACdC,OAAO,EACPC,SAAS,EACTC,QAAS,CACR,CACCC,UACA,CACCC,QAAS,CACRC,KAAM,eCRZ,SAA0BlD,SACnBmD,EAAUf,UAAapC,EAAa,OACpCoD,EAAeC,qBAAoB,CACxCC,iBAAkB,oBAGnBhB,WACC,CAAEC,EAAMgB,IACAH,EAAaI,eAAgBjB,EAAMgB,IAG3C,CACCd,KAAM,CAAE,OACRC,QAAS5H,GACDA,EAAK0H,WAAYW,KFJ3BM,CAAiBzD,GAkClB,SAAqBlF,GACpBhB,OAAO4J,KAAMC,QAAQd,OAAQjI,SAAWgJ,IAClCA,EAAIpB,WAAY1H,WACb6I,QAAQd,MAAOe,MApCxBC,CAAY7D,SAEN8D,EAAQ,IAAIC,UAAO,CACxBlI,SAAUoF,EACV+C,QAAS,OAkBX,IAAwBhJ,SAAAA,EAhBMgF,EAiBtBU,OAAU,gBAAiB,CACjC1F,IAAAA,EACAiJ,OAAQ,CACP,yBACA,yBAEDC,UAAU,KArBLtJ,SAAW2B,IAChBuH,EAAMK,QAAS5H,MAGT,IAAI6H,SAAWC,IACrBP,EAAMjJ,KAAK,KACVwJ,EAAS,CACRtI,KAAM,YACH+H,EAAMlC,MAAMjG,gBG3BnB,SAAS2I,EAAsBtE,UACvB,SAAUuE,SAOVC,EAAUC,UAAUC,cAAe,CACxCC,IAAKvC,UAAapC,EAAa,aAC/B4E,kBAAmB,SACnBC,WATwB,CACxBC,WAAY,CAAE,GAAI,IAClBC,UAAW,CAAE,GAAI,IACjBC,SAAU,CAAE,GAAI,IAChBC,MAAO,CAAE,GAAI,KAMbV,YAAAA,IAEKW,EAAaC,UAAQC,OAAQ,YAC7BC,EAAaF,UAAQC,OAAQ,QAEnCF,EAAWI,QAASd,GACpBa,EAAWC,QAASd,IChBtB,SAASe,EAAiB5J,EAAS4C,GAC7B5C,EAAQ6J,QACZjH,EAAOS,IAAK,yBAA0B,CACrCC,MAAOtC,EAAYI,UAMrBwB,EAAOS,IAAKrD,EAAQoC,QAEfpC,EAAQ8J,QACZlH,EAAOS,IAAKrD,EAAQ8J,OAAQ,CAC3BxH,KAAMd,EAAWE,MACjB4B,MAAOtC,EAAYM,OCbtB,SAASyI,GAAS1F,MACW,iBAAhBA,GAAmD,IAAvBA,EAAY7E,aAC7C,IAAId,UAAW,kDAGhBsL,EAAkB,CACvB5J,KAAM,UACNF,SAAU0J,UAGLK,WAAQ7K,QAAQ8K,IAAIC,WAClBhM,OAAOiM,OAAQ,GAAIJ,EAAiB,CAC1C3J,IAAI,EACJL,QAAS,CACR6J,SAAS,KAgBb,SAAqBxF,UACb,IAAIoE,SAAWC,UACf2B,EAAiBC,OAAM,UAAW,CACvCjL,IAAKgF,EACL6F,IAAKK,UAAWL,QACd,CAAE5J,EAAO8B,EAAQ0H,KACnBpB,EAAS,CACR8B,SAAUH,EAAeG,SACzBpI,OAAAA,EACA0H,OAAAA,UApBIW,CAAYpG,GAAcW,MAAM,EAAIwF,SAAAA,EAAUpI,OAAAA,EAAQ0H,OAAAA,KACrD3L,OAAOiM,OAAQ,GAAIJ,EAAiB,CAC1C3J,GAAiB,IAAbmK,EACJxK,QAAS,CACRoC,OAAAA,EACA0H,OAAAA,OCxBJ,MAAMnL,GAAQ,CACb,CACC6B,GAAI,OACJJ,KAAM,SACNsK,WAAW,EACXxL,IAAKmF,GACGD,EAAQC,IAIjB,CACC7D,GAAI,OACJJ,KAAM,SACNsK,WAAW,EACXxL,IAAKmF,GACGiC,EAAQjC,IAIjB,CACC7D,GAAI,WACJJ,KAAM,gBACNsK,WAAW,EACXxL,IAAKmF,GC3BP,SAAuBA,EAAasG,MACP,iBAAhBtG,GAAmD,IAAvBA,EAAY7E,aAC7C,IAAId,UAAW,gDAGhBiM,GAAwB,iBAATA,GAAqB7L,MAAMC,QAAS4L,SAClD,IAAIjM,UAAW,uDAGhBkK,EAAcgC,oBAAmBD,UAEhClC,QAAQC,QAAS,CACvBtI,KAAM,gBACNC,IAAI,EACJL,QAAS4I,EACT1I,SAAUyI,EAAsBtE,KDaxBwG,CAAcxG,EAAayG,OAAOC,kBAI3C,CACCvK,GAAI,UACJJ,KAAM,UACNsK,WAAW,EACXxL,IAAKmF,GACG0F,GAAS1F,KElCnB,MAAM2G,GAAejN,OAAQ,UACvBkN,GAAsBlN,OAAQ,iBAC9BmN,GAA2BnN,OAAQ,sBACnCoN,GAAqBpN,OAAQ,gBAEnC,MAAMqN,GACLlN,YAAayE,EAAQC,EAAQyI,EAAS,SAC7B1I,aAAkB3E,SACnB,IAAIU,UAAW,8DAGdkE,aAAkBF,SACnB,IAAIhE,UAAW,6DAGhB2M,GAAUvM,MAAMC,QAASsM,IAA8B,iBAAXA,QAC3C,IAAI3M,UAAW,gDAGjBiE,OAASA,OACTC,OAASA,OACT0I,QAAU,UACVC,YAAa,OACZP,IAAiBK,OACjBJ,KAAwB,OACxBC,KAA6B,OAE9BM,MAAOH,kBAIN/M,KAAM2M,WACNrI,OAAOS,IAAM,mBAEZ4H,KAAwB,GAG1B3M,KAAM4M,gBAILA,KAA6B,QAG7BV,QADelM,KAAKqE,OAAOzD,IAAKZ,KAAKa,MACjB,EAAI,cAExB+L,KAA6B,EAE5BV,EAGRiB,cACOH,EAAUI,UAASD,MAAO,0BAA2B,CAC1DE,YAAY,EACZC,eAAe,EACfvM,IAAKD,QAAQC,eAGdiM,EAAQzI,GAAI,OAAO,UACbgJ,sBAGDN,YAAa,OACbD,QAAUA,EAERA,EAGRO,kBACMvN,KAAM6M,SAIL7M,KAAM4M,WACJ5M,KAAKY,WAGPiM,KAAuB,OAExBxI,OAAOqD,KAAM,OAAO,UAClBmF,KAAuB,OACxBjM,UAIP4M,eACiBxN,KAAM0M,IAAee,cAG/BN,QAGCnN,KAAKY,MAGbsM,OAAOrM,KACNA,EAAOC,QAAQC,MADT2M,eAENA,EAAiB,CAAE,OAAQ,OAAQ,WAAY,WAFzCD,QAGNA,GAAU,GACP,SACE5M,KAAOA,QAEN8M,EC1GR,UAAuBD,eACtBA,EADsBD,QAEtBA,GAAU,GACP,UACGG,EAAgBF,EAAeG,KAAO3L,GAC9B7B,GAAMyN,MAAQ5N,GACnBA,EAAKgC,KAAOA,KAGLA,IAEV6L,EAAeH,EAAcrH,QAAUrG,GACrB,iBAATA,OAGV6N,EAAa7M,OAAS,EAAI,OACxB8M,EAAYD,EAAaF,KAAO3N,GAC7B,IAAIA,OACT2H,KAAM,YAEJ,IAAIzH,UAAY,wBAAwB4N,uBAG1CP,SACmBG,EAAcrH,QAAUrG,GACvCA,EAAKkM,mBAMPwB,ED2EgBK,CAAe,CACpCP,eAAAA,EACAD,QAAAA,SAGIpJ,OAAO9D,SAAUoN,mBE3GxB,SAAcZ,SACP1I,EAAS,IAAI3E,EACb4E,EAAS,IAAIF,EAAQC,UACR,IAAIyI,GAAezI,EAAQC,EAAQyI"}